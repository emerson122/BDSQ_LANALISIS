/*----------------------------------------------------------------------------------------------------------------------------------------
--                            PROCEDIMIENTOS ALMACENADOS PARA SYSTEM HTOURS                                                             --
--                                        TECNOBOT
-----------------------------------------------------------------------------------------------------------------------------------------
*/

/*-----------------------------------------------------------MODULO DE CUENTAS-------------------------------------------------*/
/*
NOMBRE: INS_CUENTAS
DESCRIPCION: PROCEDIMIENTO PARA INSERTAR LOS DATOS DE LA CUENTA
AUTOR: ALEXANDRA MOYA
VERSION: 1.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/

DROP PROCEDURE IF EXISTS INS_CUENTAS;
CREATE PROCEDURE INS_CUENTAS(
   IN PV_NATURALEZA Varchar(255)
  ,IN PV_NOMBRE_CUENTA VARCHAR(255)
  ,IN PV_NUM_CUENTA VARCHAR(255)
  ,IN PB_CODGRUPO    varchar(255)
)
BEGIN
DECLARE V_CODIGO,V_NUMGRUPO VARCHAR(255);
DECLARE V_VALIDADORDEEXISTENCIA INT;
/*LLEVA FORANEA CON LA CLASIFICACION*/
/*Valida naturaleza*/
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA = PV_NATURALEZA INTO V_CODIGO;
SELECT NUM_GRUPO FROM TBL_GRUPOS WHERE COD_GRUPO = PB_CODGRUPO INTO V_NUMGRUPO;

/*Valida existencia*/
select count(*) from tbl_cuentas where NUM_CUENTA = CONCAT(V_NUMGRUPO,'.',PV_NUM_CUENTA) INTO V_VALIDADORDEEXISTENCIA;
/*
si NO existe*/
IF V_VALIDADORDEEXISTENCIA = 0 THEN


INSERT INTO tbl_cuentas
(COD_CLASIFICACION,COD_GRUPO ,NUM_CUENTA, NOM_CUENTA) 
VALUES (V_CODIGO,PB_CODGRUPO, CONCAT(V_NUMGRUPO,'.',PV_NUM_CUENTA), PV_NOMBRE_CUENTA);

SELECT @COD_CUENTA := MAX(COD_CUENTA) FROM TBL_CUENTAS;

INSERT INTO tbl_estados_cuentas
(COD_CUENTA, EST_CUENTA) 
VALUES (@COD_CUENTA , 'INGRESADA');


/* Si ya  existe despliega mensaje que esta duplicado */
ELSE
SELECT 'NUMERO DE CUENTA DUPLICADA';
END IF;
COMMIT;
END;



-- DROP PROCEDURE IF EXISTS INS_CUENTAS;
-- CREATE PROCEDURE INS_CUENTAS(
--    IN PV_NATURALEZA Varchar(255)
--   ,IN PV_NOMBRE_CUENTA VARCHAR(255)
--   ,IN PV_NUM_CUENTA VARCHAR(255)
--   /* ,IN PV_OPERACION VARCHAR(1)
--   ,IN PB_FILA BIGINT  */
-- )
-- BEGIN
-- DECLARE V_CODIGO VARCHAR(255);
-- DECLARE V_VALIDADORDEEXISTENCIA INT;
-- /*LLEVA FORANEA CON LA CLASIFICACION*/
-- /*Valida naturaleza*/
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA = PV_NATURALEZA INTO V_CODIGO;
-- /*Valida existencia*/
-- select count(*) from tbl_cuentas where NUM_CUENTA = CONCAT(V_CODIGO,'.',PV_NUM_CUENTA) INTO V_VALIDADORDEEXISTENCIA;
-- /*
-- si NO existe*/
-- IF V_VALIDADORDEEXISTENCIA = 0 THEN

-- INSERT INTO tbl_cuentas
-- (COD_CLASIFICACION, NUM_CUENTA, NOM_CUENTA) 
-- VALUES (V_CODIGO, CONCAT(V_CODIGO,'.',PV_NUM_CUENTA), PV_NOMBRE_CUENTA);

-- SELECT @COD_CUENTA := MAX(COD_CUENTA) FROM TBL_CUENTAS;

-- INSERT INTO tbl_estados_cuentas
-- (COD_CUENTA, EST_CUENTA) 
-- VALUES (@COD_CUENTA , 'INGRESADA');


-- /* Si ya  existe despliega mensaje que esta duplicado */
-- ELSE
-- SELECT 'NUMERO DE CUENTA DUPLICADA';
-- END IF;
-- COMMIT;
-- END;

/*
NOMBRE: PRC_CUENTAS
DESCRIPCION: PROCEDIMIENTO PARA ACTUALIZAR Y ELIMINAR LOS DATOS DE LAS CUENTAS
AUTOR: ALEXANDRA MOYA
VERSION: 1.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/


DROP PROCEDURE IF EXISTS PRC_CUENTAS;
CREATE PROCEDURE PRC_CUENTAS(
   IN PB_NATURALEZA BIGINT
  ,IN PV_NOMBRE_CUENTA VARCHAR(255)
  ,IN PV_NUM_CUENTA VARCHAR(255)
  ,IN PV_OPERACION VARCHAR(1)
  ,IN PB_FILA BIGINT 
)
BEGIN 
DECLARE V_NATURALEZA VARCHAR(255);
START TRANSACTION;
IF PV_OPERACION = 2 THEN
UPDATE tbl_cuentas 
SET COD_CLASIFICACION = PB_NATURALEZA , NUM_CUENTA = PV_NUM_CUENTA, NOM_CUENTA = PV_NOMBRE_CUENTA 
WHERE COD_CUENTA = PB_FILA;
ELSEIF PV_OPERACION = 3 THEN
DELETE FROM TBL_CUENTAS WHERE COD_CUENTA = PB_FILA;
ELSEIF PV_OPERACION = 4 THEN
SELECT * FROM TBL_CUENTAS;
ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_CUENTAS WHERE COD_CUENTA = PB_FILA;
ELSEIF PV_OPERACION = 6 THEN
SELECT NUM_CUENTA FROM TBL_CUENTAS WHERE  COD_CUENTA =  PB_FILA;
END IF;
COMMIT;
END;

/*
NOMBRE: PRC_SUBCUENTAS
DESCRIPCION: PROCEDIMIENTO PARA ACTUALIZAR Y ELIMINAR LOS DATOS DE LAS CUENTAS
AUTOR: ALEXANDRA MOYA
VERSION: 1.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
DROP PROCEDURE IF EXISTS PRC_SUBCUENTAS;
CREATE PROCEDURE PRC_SUBCUENTAS(
    IN PB_COD_CLASIFICACION BIGINT
, IN  PV_NUM_SUBCUENTA VARCHAR(255)                   
,IN  PV_NOM_SUBCUENTA VARCHAR(255)
, IN PV_NOM_CUENTA  VARCHAR(255)
, IN PV_OPERACION  VARCHAR(1)
, IN PB_FILA       BIGINT
)
BEGIN
DECLARE V_NUM VARCHAR(255);
DECLARE V_VALIDADORDEEXISTENCIA,V_CLASIFICACION,V_CODCUENTA BIGINT;
START TRANSACTION;
SELECT COD_CLASIFICACION,NUM_CUENTA,COD_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_NUM,V_CODCUENTA;
IF PV_OPERACION = 1 THEN

/*Valida existencia*/
select count(*) from tbl_subcuentas where NUM_SUBCUENTA = CONCAT(V_NUM,'.',PV_NUM_SUBCUENTA) INTO V_VALIDADORDEEXISTENCIA;
/*
si NO existe*/
IF V_VALIDADORDEEXISTENCIA = 0 THEN
INSERT INTO tbl_subcuentas
(COD_CLASIFICACION, NUM_SUBCUENTA, NOM_SUBCUENTA, COD_CUENTA) 
VALUES (V_CLASIFICACION,  CONCAT(V_NUM,'.',PV_NUM_SUBCUENTA), PV_NOM_SUBCUENTA, V_CODCUENTA);

SELECT @COD_SUBCUENTA := MAX(COD_SUBCUENTA) FROM TBL_SUBCUENTAS;

INSERT INTO tbl_estados_subcuentas
(COD_SUBCUENTA, EST_SUBCUENTAS) 
VALUES (@COD_SUBCUENTA, 'INGRESADA');

ELSE 
SELECT 'NUMERO DE SUBCUENTA DUPLICADA';
END IF;
ELSEIF  PV_OPERACION = 2 THEN
SELECT COD_CLASIFICACION,COD_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_NUM;
UPDATE tbl_subcuentas 
SET COD_CLASIFICACION = V_CLASIFICACION , NUM_SUBCUENTA = PV_NUM_SUBCUENTA, NOM_SUBCUENTA = PV_NOM_SUBCUENTA, COD_CUENTA = V_NUM 
WHERE COD_SUBCUENTA = PB_FILA
;
ELSEIF  PV_OPERACION = 3 THEN
DELETE FROM TBL_SUBCUENTAS WHERE  COD_SUBCUENTA = PB_FILA;
delete from tbl_estados_subcuentas WHERE COD_SUBCUENTA =  PB_FILA;
ELSEIF  PV_OPERACION = 4 THEN
SELECT * FROM TBL_SUBCUENTAS;
ELSEIF  PV_OPERACION = 5 THEN
SELECT * FROM TBL_SUBCUENTAS WHERE  COD_SUBCUENTA = PB_FILA;
ELSEIF PV_OPERACION = 6 THEN
SELECT NUM_SUBCUENTA FROM TBL_SUBCUENTAS WHERE  COD_SUBCUENTA = PB_FILA;
END IF;
COMMIT;
END;



/*------------------------------------------------------MODULO CONTABLE---------------------------------------*/
/*
NOMBRE: PRC_LIBDIARIO
DESCRIPCION: PROCEDIMIENTO PARA ACTUALIZAR Y ELIMINAR LOS DATOS DE LIBRO DIARIO
AUTOR: ZOILA MARGARITA LICONA 
VERSION: 1.0


 -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
DROP PROCEDURE IF EXISTS PRC_LIBDIARIO;
CREATE PROCEDURE PRC_LIBDIARIO(
   IN PB_CODPERIODO BIGINT
  ,IN PV_NOM_CUENTA VARCHAR(255)
  ,IN PV_NOM_SUBCUENTA VARCHAR(255)
  ,IN PD_SALDO_DEBE DECIMAL(8,2)
  ,IN PD_SALDO_HABER  DECIMAL(8,2)
  ,IN PV_OPERACION VARCHAR(1)
  ,IN PB_FILA BIGINT 
)
BEGIN
DECLARE V_CODCUENTA,V_CODSUBCUENTA,V_CODESTCUENTA BIGINT;
DECLARE V_SUBCUENTA VARCHAR(255);
START TRANSACTION;

/* Trae los datos de las cuentas disponibles */


/*Insertar Libro Diario CUENTA Y SUBCUENTA  */
IF PV_OPERACION = 1 THEN
/*---------------------------------------------------------------------------------------------------------*/
SELECT COD_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA =  PV_NOM_CUENTA INTO V_CODCUENTA; 
SELECT COD_SUBCUENTA, NUM_SUBCUENTA  FROM TBL_SUBCUENTAS WHERE NOM_SUBCUENTA = PV_NOM_SUBCUENTA INTO V_CODSUBCUENTA,V_SUBCUENTA; 
-- SELECT COD_ESTADO from tbl_estados_subcuentas where cod_subcuenta = V_CODSUBCUENTA INTO V_CODESTCUENTA;
/*
INSERT INTO tbl_libros_diarios
(COD_CUENTA, COD_SUBCUENTA, COD_ESTADO, NUM_SUBCUENTA, NOM_SUBCUENTA, SAL_DEBE, SAL_HABER, FEC_LIBDIARIO) 
VALUES (V_CODCUENTA, V_CODSUBCUENTA, V_CODESTCUENTA, V_SUBCUENTA, PV_NOM_SUBCUENTA, PD_SALDO_DEBE, PD_SALDO_HABER, now());
*/

INSERT INTO tbl_libros_diarios
(COD_CUENTA,COD_PERIODO, NUM_SUBCUENTA, NOM_SUBCUENTA, SAL_DEBE, SAL_HABER, FEC_LIBDIARIO) 
VALUES (V_CODCUENTA,PB_CODPERIODO ,V_SUBCUENTA, PV_NOM_SUBCUENTA, PD_SALDO_DEBE, PD_SALDO_HABER, now());




INSERT INTO trans_libsub
(COD_SUBCUENTA) 
VALUES (V_CODSUBCUENTA);



SELECT @COD_ESTADO := MAX(COD_LIBDIARIO) FROM TBL_LIBROS_DIARIOS;

/*Se Actualiza el estado de las cuentas*/
UPDATE tbl_estados_cuentas 
SET COD_CUENTA = V_CODCUENTA , EST_CUENTA = 'PENDIENTE'
WHERE COD_ESTCUENTA = @COD_ESTADO;

-- ACTUALIZAR ESTADO DE SUBCUENTA
UPDATE tbl_estados_subcuentas 
SET COD_SUBCUENTA = COD_SUBCUENTA , EST_SUBCUENTAS = 'PENDIENTE' 
WHERE COD_ESTADO =  @COD_ESTADO;

/* Insertar solo cuentas*/
ELSEIF PV_OPERACION = 2 THEN
SELECT COD_CUENTA,NUM_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA =  PV_NOM_CUENTA INTO V_CODCUENTA,V_SUBCUENTA; 
SELECT COD_ESTCUENTA from tbl_estados_cuentas where cod_cuenta = V_CODCUENTA INTO V_CODESTCUENTA;
/*
INSERT INTO tbl_libros_diarios
(COD_CUENTA, COD_SUBCUENTA, COD_ESTADO, NUM_SUBCUENTA, NOM_SUBCUENTA, SAL_DEBE, SAL_HABER, FEC_LIBDIARIO) 
VALUES (V_CODCUENTA, V_CODSUBCUENTA, V_CODESTCUENTA, V_SUBCUENTA, PV_NOM_SUBCUENTA, PD_SALDO_DEBE, PD_SALDO_HABER, now());
*/

INSERT INTO tbl_libros_diarios
(COD_CUENTA, COD_PERIODO,NUM_SUBCUENTA, NOM_SUBCUENTA, SAL_DEBE, SAL_HABER, FEC_LIBDIARIO) 
VALUES (V_CODCUENTA, PB_CODPERIODO,V_SUBCUENTA, PV_NOM_CUENTA, PD_SALDO_DEBE, PD_SALDO_HABER, now());



SELECT @COD_ESTCUENTA := MAX(COD_LIBDIARIO) FROM TBL_LIBROS_DIARIOS;

/*Se Actualiza el estado de las cuentas*/
UPDATE tbl_estados_cuentas 
SET  EST_CUENTA = 'PENDIENTE'
WHERE COD_CUENTA = V_CODCUENTA;

/*Trae los datos de las subcuentas disponibles*/
ELSEIF PV_OPERACION = 3 THEN
SELECT NUM_SUBCUENTA, NOM_SUBCUENTA FROM TBL_SUBCUENTAS WHERE COD_CUENTA =  PB_FILA ;

ELSEIF PV_OPERACION = 4 THEN
SELECT NUM_CUENTA,NOM_CUENTA FROM TBL_CUENTAS ORDER BY NUM_CUENTA Asc;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_LIBROS_DIARIOS;

ELSEIF PV_OPERACION = 6 THEN
SELECT * FROM TBL_LIBROS_DIARIOS WHERE COD_LIBDIARIO = PB_FILA;
END IF;
COMMIT;
END;

DROP PROCEDURE if EXISTS PRC_ESTADOS_CUENTAS;
CREATE PROCEDURE PRC_ESTADOS_CUENTAS(
   IN PB_COD_CUENTA BIGINT
  ,IN PEM_EST_CUENTA ENUM('INGRESADA', 'PENDIENTE', 'PROCESADA')
  ,IN PV_OPERACION VARCHAR (1)
  ,IN PB_FILA BIGINT 
)

BEGIN
START TRANSACTION;
IF PV_OPERACION = 1 THEN

INSERT INTO TBL_ESTADOS_CUENTAS
(COD_CUENTA,EST_CUENTA)
VALUES (PB_COD_CUENTA,  PEM_EST_CUENTA );

ELSEIF PV_OPERACION = 2 THEN

UPDATE TBL_ESTADOS_CUENTAS
SET COD_CUENTA = PB_COD_CUENTA , EST_CUENTA = PEM_EST_CUENTA
WHERE COD_ESTCUENTA = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM TBL_ESTADOS_CUENTAS 
WHERE COD_ESTCUENTA = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_ESTADOS_CUENTAS;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_ESTADOS_CUENTAS WHERE COD_ESTCUENTA = PB_FILA;

END IF;
COMMIT;
END;

/*
NOMBRE: SEL_CATALAGO_CUENTAS
DESCRIPCION: PROCEDIMIENTO PARA SELECCIONAR LAS CUENTAS DE LIBRO DIARIO
AUTOR: EMERSON EXEQUIEL RAMOS VELASQUEZ
VERSION: 1.0


 -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
DROP PROCEDURE IF EXISTS SEL_CATALAGO_CUENTAS;
CREATE PROCEDURE SEL_CATALAGO_CUENTAS(
   IN PV_NATURALEZA VARCHAR(255)
)
BEGIN
DECLARE V_CODCUENTA BIGINT;
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA = PV_NATURALEZA INTO V_CODCUENTA;
START TRANSACTION;
SELECT NUM_CUENTA,NOM_CUENTA FROM tbl_cuentas WHERE COD_CLASIFICACION =  V_CODCUENTA order by NUM_CUENTA Asc;
COMMIT;
END;


/*
NOMBRE: UPD_LIBDIARIO
DESCRIPCION: PROCEDIMIENTO PARA ACTUALIZAR Y ELIMINAR LOS DATOS DE LIBRO DIARIO
AUTOR: ZOILA MARGARITA LICONA 
VERSION: 1.0


 -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/

DROP PROCEDURE IF EXISTS UPD_LIBDIARIO;
CREATE PROCEDURE UPD_LIBDIARIO(
 IN PB_COD_CUENTA    BIGINT                                                                
,IN PB_NUM_SUBCUENTA VARCHAR(255)                    
,IN PB_NOM_SUBCUENTA VARCHAR(255)                    
,IN PB_SAL_DEBE    DECIMAL (8,2)                    
,IN PB_SAL_HABER   DECIMAL (8,2)                     
,IN PB_FEC_LIBDIARIO DATETIME    
,IN PB_FILA BIGINT
)
BEGIN
START TRANSACTION;
UPDATE tbl_libros_diarios 
SET COD_CUENTA = PB_COD_CUENTA ,  NUM_SUBCUENTA = PB_NUM_SUBCUENTA, NOM_SUBCUENTA = PB_NOM_SUBCUENTA, SAL_DEBE = PB_SAL_DEBE, SAL_HABER = PB_SAL_HABER, FEC_LIBDIARIO = NOW() 
WHERE COD_LIBDIARIO = PB_FILA;
COMMIT;
END;

DROP PROCEDURE IF EXISTS DEL_LIBDIARIO;
CREATE PROCEDURE DEL_LIBDIARIO(
PB_CODLIBDIARIO BIGINT
)
BEGIN
START TRANSACTION;
DELETE FROM tbl_libros_diarios 
WHERE COD_LIBDIARIO = PB_CODLIBDIARIO;
COMMIT;
END;


DROP PROCEDURE IF EXISTS PRC_ms_patametros;
CREATE PROCEDURE PRC_ms_patametros(
   IN PV_PARAMETRO VARCHAR(255)
  ,IN PV_VALOR VARCHAR(50)
  ,IN PB_COD_USR BIGINT
  ,IN PV_OPERACION VARCHAR (1)
  ,IN PB_FILA BIGINT 
)

BEGIN
START TRANSACTION;
IF PV_OPERACION = 1 THEN

INSERT INTO tbl_ms_parametros
(PARAMETRO,VALOR, COD_USR, FEC_CREACION, FEC_MODIFICACION )
VALUES (PV_PARAMETRO,  PV_VALOR, PB_COD_USR, NOW(), NOW());

ELSEIF PV_OPERACION = 2 THEN

UPDATE tbl_ms_parametros
SET PARAMETRO = PV_PARAMETRO , VALOR = PV_VALOR,FEC_CREACION=NOW(), FEC_MODIFICACION = NOW()
WHERE COD_PARAMETRO = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM tbl_ms_parametros 
WHERE COD_PARAMETRO = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM tbl_ms_parametros;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM tbl_ms_parametros WHERE COD_PARAMETRO = PB_FILA;

END IF;
COMMIT;
END;




/* BALANCE GENERAL */

/*
NOMBRE: PRC_BAL_GENERAL
DESCRIPCION: PROCEDIMIENTO PARA ACTUALIZAR Y ELIMINAR LOS DATOS
AUTOR: ZOILA MARGARITA LICONA 
VERSION: 2.0


 -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/

-- FUNCIONAL 
DROP PROCEDURE IF EXISTS PRC_BAL_GENERAL;
CREATE PROCEDURE `PRC_BAL_GENERAL`(
 IN PB_CODPERIODO     BIGINT 
,IN PV_OPCION         VARCHAR(1)
)
BEGIN
DECLARE V_TOTAL,v_ACTCORRIENTE,V_PASCORRIENTE,V_ACTNOCORRIENTE,V_PASNOCC,V_PATRIMONIO,V_ACTIVO,V_PASIVO  DECIMAL(8,2);
DECLARE V_CLASIFICACION,V_CODACTIVO, V_CODPASIVO,V_CODPATRIMONIO,V_NUM,V_TIPO BIGINT;
DECLARE V_NOM VARCHAR(255);
START TRANSACTION;
IF PV_OPCION = 1 THEN
/*Trae el total de saldo debe y haber de activo*/
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'ACTIVO' INTO V_CLASIFICACION;
SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = "Activo Corriente" INTO V_TIPO;
SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_TIPO INTO v_ACTCORRIENTE;

/*Trea saldo debe y haber de PASIVO*/
SET V_CLASIFICACION := 0;
SET V_TIPO := 0;
SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = "activo no corriente" INTO V_TIPO;
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'ACTIVO' INTO V_CLASIFICACION;
SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_TIPO INTO V_ACTNOCORRIENTE;

SET V_CLASIFICACION := 0;
SET V_TIPO := 0;
SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = "pasivo corriente" INTO V_TIPO;
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'PASIVO' INTO V_CLASIFICACION;
SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_TIPO INTO V_PASCORRIENTE;


SET V_CLASIFICACION := 0;
SET V_TIPO := 0;
SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = "pasivo no corriente" INTO V_TIPO;
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'PASIVO' INTO V_CLASIFICACION;
SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_TIPO INTO V_PASNOCC;

/*Trea saldo debe y haber de PATRIMONIO*/
SET V_CLASIFICACION := 0;
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'PATRIMONIO' INTO V_CLASIFICACION;
SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO INTO V_PATRIMONIO;

/*Traer nombre de la empresa */
SELECT VALOR FROM tbl_ms_parametros WHERE PARAMETRO = 'NOM_EMPRESA'INTO V_NOM;

SELECT V_PASCORRIENTE,V_PASNOCC;

SET V_ACTIVO := v_ACTCORRIENTE + V_ACTNOCORRIENTE;
SET V_PASIVO := V_PASCORRIENTE + V_PASNOCC;

SELECT v_ACTCORRIENTE AS Activos_Corrientes,V_ACTNOCORRIENTE AS ACTIVOS_NOCORRIENTES,V_ACTIVO AS TOTAL_ACTIVOS
,V_PASCORRIENTE AS PASIVOS_CORRIENTES,V_PASNOCC AS PASIVOS_NOCORRIENTES,
V_PASIVO AS TOTAL_PASIVOS,V_PATRIMONIO AS TOTAL_PATRIMONIOS, V_NOM AS NOMBRE_EMPRESA;

ELSEIF PV_OPCION = 2 THEN
/*todos los datos de los activos de libro mayor */
SELECT COD_GRUPO FROM TBL_GRUPOS  WHERE NOM_GRUPO =  'Activo Corriente' INTO V_CLASIFICACION;
SELECT * FROM tbl_libros_mayores WHERE COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_CLASIFICACION;
ELSEIF PV_OPCION = 3 THEN
SELECT COD_GRUPO FROM TBL_GRUPOS  WHERE NOM_GRUPO =  'activo no corriente' INTO V_CLASIFICACION;
SELECT * FROM tbl_libros_mayores WHERE COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_CLASIFICACION;
ELSEIF PV_OPCION = 4 THEN
SELECT COD_GRUPO FROM TBL_GRUPOS  WHERE NOM_GRUPO =  'pasivo corriente' INTO V_CLASIFICACION;
SELECT * FROM tbl_libros_mayores WHERE COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_CLASIFICACION;
ELSEIF PV_OPCION = 5 THEN
SELECT COD_GRUPO FROM TBL_GRUPOS  WHERE NOM_GRUPO =  'pasivo no corriente' INTO V_CLASIFICACION;
SELECT * FROM tbl_libros_mayores WHERE COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_CLASIFICACION;
END IF;
COMMIT;
END;


/* Con tablas  */
-- DROP PROCEDURE IF EXISTS PRC_BAL_GENERAL;
-- CREATE PROCEDURE `PRC_BAL_GENERAL`(
--  IN PV_NOMBRE_EMPRESA VARCHAR(255)
-- ,IN PB_CODPERIODO     BIGINT 
-- ,IN PV_NATURALEZA     VARCHAR(255)
-- ,IN PV_OPCION         VARCHAR(1)
-- )
-- BEGIN
-- DECLARE V_NUMCUENTA,V_NOMCUENTA VARCHAR(255);
-- DECLARE V_TOTAL,V_ACTIVO,V_PASIVO,V_PATRIMONIO DECIMAL(8,2);
-- DECLARE V_NUM,V_CLASIFICACION,I,V_CODIGO BIGINT;
-- IF PV_OPCION = 1 THEN
-- /*Trea saldo debe y haber de activo*/
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  PV_NATURALEZA INTO V_CLASIFICACION;
-- SELECT COD_LIBMAYOR,NUM_CUENTA,NOM_CUENTA,SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO INTO V_CODIGO,V_NUMCUENTA,V_NOMCUENTA,V_TOTAL;

-- /* INSERTAR EN LA TABLA DE ACTIVOS DEL BALANCE */
-- INSERT INTO tbl_bal_totactivos
-- (COD_PERIODO, TOT_ACTIVO) 
-- VALUES (PB_CODPERIODO, V_TOTAL);
-- /* MOSTRAR LOS DATOS PARA EL USUARIO */
-- SELECT COD_LIBMAYOR,NUM_CUENTA,NOM_CUENTA,SAL_DEBE FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO;
-- ELSEIF PV_OPCION = 2 THEN
-- /*Trea saldo debe y haber de activo*/
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  PV_NATURALEZA INTO V_CLASIFICACION;
-- SELECT COD_LIBMAYOR,NUM_CUENTA,NOM_CUENTA,SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO INTO V_CODIGO,V_NUMCUENTA,V_NOMCUENTA,V_TOTAL;

-- /* INSERTAR EN LA TABLA DE ACTIVOS DEL BALANCE */
-- INSERT INTO tbl_bal_totpasivos
-- (COD_PERIODO, TOT_PASIVO) 
-- VALUES (PB_CODPERIODO, V_TOTAL);

-- /* MOSTRAR LOS DATOS PARA EL USUARIO */
-- SELECT COD_LIBMAYOR,NUM_CUENTA,NOM_CUENTA,SAL_HABER FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO;

-- ELSEIF PV_OPCION = 3 THEN
-- /*Trea saldo debe y haber de activo*/
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  PV_NATURALEZA INTO V_CLASIFICACION;
-- SELECT COD_LIBMAYOR,NUM_CUENTA,NOM_CUENTA,SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO INTO V_CODIGO,V_NUMCUENTA,V_NOMCUENTA,V_TOTAL;

-- /* INSERTAR EN LA TABLA DE ACTIVOS DEL BALANCE */

-- INSERT INTO tbl_bal_totpatrimonios
-- (COD_PERIODO, TOT_PATRIMONIO) 
-- VALUES (PB_CODPERIODO, V_TOTAL);

-- /* MOSTRAR LOS DATOS PARA EL USUARIO */
-- SELECT COD_LIBMAYOR,NUM_CUENTA,NOM_CUENTA,SAL_HABER FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO;

-- ELSEIF PV_OPCION = 4 THEN
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA = PV_NATURALEZA INTO V_CLASIFICACION;
-- SELECT 
-- NUM_CUENTA,NOM_CUENTA,SAL_DEBE,SAL_HABER 
-- FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_CLASIFICACION;
-- ELSEIF PV_OPCION = 5 THEN

-- SELECT  TOT_ACTIVO FROM  TBL_BAL_TOTACTIVOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_ACTIVO;
-- SELECT  TOT_PASIVO FROM  TBL_BAL_TOTPASIVOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_PASIVO;
-- SELECT  TOT_PATRIMONIO FROM  TBL_BAL_TOTPATRIMONIOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_PATRIMONIO;

-- SELECT V_ACTIVO AS TOTAL_ACTIVOS,
-- V_PASIVO AS TOTAL_PASIVOS,
-- V_PATRIMONIO AS TOTAL_PATRIMONIO;
-- END IF;
-- COMMIT;
-- END;



/* PROCEDIMIENTO QUE NO NECESITA TABLAS */
-- DROP PROCEDURE IF EXISTS PRC_BAL_GENERAL;
-- CREATE PROCEDURE `PRC_BAL_GENERAL`(
--  IN PB_CODPERIODO     BIGINT 
-- ,IN PV_OPCION         VARCHAR(1)
-- )
-- BEGIN
-- DECLARE V_TOTAL,v_ACTCORRIENTE,V_PASCORRIENTE,V_ACTNOCORRIENTE,V_PASNOCC,V_PATRIMONIO,V_ACTIVO,V_PASIVO  DECIMAL(8,2);
-- DECLARE V_CLASIFICACION,V_CODACTIVO, V_CODPASIVO,V_CODPATRIMONIO,V_NUM,V_TIPO BIGINT;
-- DECLARE V_NOM VARCHAR(255);
-- START TRANSACTION;
-- IF PV_OPCION = 1 THEN
-- /*Trae el total de saldo debe y haber de activo*/
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'ACTIVO' INTO V_CLASIFICACION;
-- SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = "Activo Corriente" INTO V_TIPO;
-- SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_TIPO INTO v_ACTCORRIENTE;

-- /*Trea saldo debe y haber de PASIVO*/
-- SET V_CLASIFICACION := 0;
-- SET V_TIPO := 0;
-- SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = "activo no corriente" INTO V_TIPO;
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'ACTIVO' INTO V_CLASIFICACION;
-- SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_TIPO INTO V_ACTNOCORRIENTE;

-- SET V_CLASIFICACION := 0;
-- SET V_TIPO := 0;
-- SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = "pasivo corriente" INTO V_TIPO;
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'PASIVO' INTO V_CLASIFICACION;
-- SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_TIPO INTO V_PASCORRIENTE;


-- SET V_CLASIFICACION := 0;
-- SET V_TIPO := 0;
-- SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = "pasivo no corriente" INTO V_TIPO;
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'PASIVO' INTO V_CLASIFICACION;
-- SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_TIPO INTO V_PASNOCC;

-- /*Trea saldo debe y haber de PATRIMONIO*/
-- SET V_CLASIFICACION := 0;
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'PATRIMONIO' INTO V_CLASIFICACION;
-- SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO INTO V_PATRIMONIO;

-- /*Traer nombre de la empresa */
-- SELECT VALOR FROM tbl_ms_parametros WHERE PARAMETRO = 'NOM_EMPRESA'INTO V_NOM;

-- SELECT V_PASCORRIENTE,V_PASNOCC;

-- SET V_ACTIVO := v_ACTCORRIENTE + V_ACTNOCORRIENTE;
-- SET V_PASIVO := V_PASCORRIENTE + V_PASNOCC;

-- SELECT v_ACTCORRIENTE AS Activos_Corrientes,V_ACTNOCORRIENTE AS ACTIVOS_NOCORRIENTES,V_ACTIVO AS TOTAL_ACTIVOS
-- ,V_PASCORRIENTE AS PASIVOS_CORRIENTES,V_PASNOCC AS PASIVOS_NOCORRIENTES,
-- V_PASIVO AS TOTAL_PASIVOS,V_PATRIMONIO AS TOTAL_PATRIMONIOS, V_NOM AS NOMBRE_EMPRESA;

-- ELSEIF PV_OPCION = 2 THEN
-- /*todos los datos de los activos de libro mayor */
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'ACTIVO' INTO V_CLASIFICACION;
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  PV_NATURALEZA INTO V_CLASIFICACION;
-- SELECT * FROM tbl_libros_mayores WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_CLASIFICACION;
-- ELSEIF PV_OPCION = 3 THEN
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'PASIVO' INTO V_CLASIFICACION;
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  PV_NATURALEZA INTO V_CLASIFICACION;
-- SELECT * FROM tbl_libros_mayores WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_CLASIFICACION;
-- ELSEIF PV_OPCION = 4 THEN
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'PATRIMONIO' INTO V_CLASIFICACION;
-- SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  PV_NATURALEZA INTO V_CLASIFICACION;
-- SELECT * FROM tbl_libros_mayores WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_CLASIFICACION;
-- END IF;
-- COMMIT;
-- END;

/*
NOMBRE: PRC_SALDOS
DESCRIPCION: PROCEDIMIENTO PARA ACTUALIZAR SELECCIONAR Y ELIMINAR LOS DATOS
AUTOR: EMERSON EXEQUIEL RAMOS VELASQUEZ
VERSION: 1.0


 -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/




DROP PROCEDURE IF EXISTS PRC_SALDOS_BALANCES;
CREATE PROCEDURE PRC_SALDOS_BALANCES(
        IN PB_CODPERIODO   BIGINT
      , IN PV_OPERACION VARCHAR(1)
      , IN PB_FILA   BIGINT 
)
BEGIN
DECLARE V_ACTIVO,V_PASIVO,V_PATRIMONIO,V_TOTAL BIGINT;
START TRANSACTION;
IF PV_OPERACION = 1 THEN

 SELECT SUM(TOT_ACTIVO) FROM TBL_BAL_TOTACTIVOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_ACTIVO;
 SELECT SUM(TOT_PASIVO) FROM TBL_BAL_TOTPASIVOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_PASIVO;
 SELECT SUM(TOT_PATRIMONIO) FROM TBL_BAL_TOTPATRIMONIOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_PATRIMONIO;

SET V_TOTAL := V_PASIVO + V_PATRIMONIO;

INSERT INTO tbl_saldos_balances
( FEC_SALDOS, TOT_ACTIVO, TOT_PASPAT) 
VALUES ( NOW(), V_ACTIVO, V_TOTAL);


ELSEIF PV_OPERACION = 3 THEN

DELETE FROM tbl_saldos_balances 
WHERE COD_SALDO = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM tbl_saldos_balances;
ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_SALDOS_BALANCES WHERE COD_SALDO = PB_FILA;
ELSEIF PV_OPERACION = 6 THEN
SELECT * FROM TBL_SALDOS_BALANCES WHERE COD_PERIODO = PB_CODPERIODO;

END IF;
COMMIT;
END;
/*
NOMBRE: PRC_MS_USR_REGISTRO
DESCRIPCION: PROCEDIMIENTO PARA REGISTRAR UN USUARIO
AUTOR: EMERSON EXEQUIEL RAMOS VELASQUEZ
VERSION: 1.0


 -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
DROP PROCEDURE IF EXISTS PRC_MS_USR_REGISTRO;
CREATE  PROCEDURE `PRC_MS_USR_REGISTRO`(
/*
 * NOMBRE : INSERTAR TABLAS MS USUARIOS
 * DESCRIPCIÓN : PROCEDIMIENTOS INSERTAR TBL_MS_USR
 * AUTOR: EMERSON RAMOS
 * VERSION : 1.0  
 * */
 -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PTI = PARAMETRO TYNINT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
 -- PARAMETROS:

IN PV_USR 			VARCHAR(50),
IN PV_NOM_USR 		VARCHAR(100),
IN PB_COD_ROL       BIGINT,
IN PF_FEC_ULT_CONN 	DATE, 
IN PB_PREG_RES		BIGINT(20), 
IN PB_PRIMER_ACC 		BIGINT(20), 
IN PV_CORREO 			VARCHAR(100), 
IN PV_CONTRASEGNA 	VARCHAR(32)

)
BEGIN
DECLARE V_VAL BIGINT DEFAULT 0;
	START TRANSACTION;



SELECT COUNT(*) FROM TBL_MS_USR WHERE USR = PV_USR INTO V_VAL;
IF V_VAL = 0 THEN
SELECT  @USR := COUNT(COD_USR) FROM TBL_MS_USR;

IF @USR = 0 THEN 
	ALTER TABLE TBL_MS_USR  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_PREG  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_PREG_USR  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_HIST_CONTRASEGNA  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_BITACORA_USR AUTO_INCREMENT = 0;
END IF;
-- INSERTAR TABLA MS USUARIOS
INSERT INTO TBL_MS_USR(
USR,
NOM_USR,
COD_ROL,
FEC_ULT_CONN,	 		
PREG_RES,				
PRIMER_ACC, 				
CORREO)
VALUES(
PV_USR,
PV_NOM_USR,
PB_COD_ROL,
PF_FEC_ULT_CONN,	 		
PB_PREG_RES,				
PB_PRIMER_ACC, 				
PV_CORREO
);



SELECT @COD_USR := MAX(COD_USR) FROM TBL_MS_USR;



-- INSERTAR TABLA HISTORIAL CONTRASEÑA
INSERT INTO TBL_MS_HIST_CONTRASEGNA(
COD_USR,
CONTRASEGNA)
VALUES(
@COD_USR,
PV_CONTRASEGNA
);
SELECT @COD_CONTRA := MAX(COD_HIST_CONTRA) FROM TBL_MS_HIST_CONTRASEGNA;
-- INSERTAR TABLA BITACORA USUARIOS
INSERT INTO TBL_MS_BITACORA_USR (
COD_USR,
COD_CONTRA,
USR_CREA_POR,
USR_MODF_POR,
USR_FEC_CREA,
USR_FEC_MODF, 
CONTRA_CREA_POR, 
CONTRA_MODF_POR, 
CONTRA_FEC_CREA, 
CONTRA_FEC_MODF)
VALUES(
@COD_USR,
@COD_CONTRA,
CURRENT_USER(),
CURRENT_USER(),
NOW(),
NOW(),
CURRENT_USER(),
CURRENT_USER(),
NOW(),
NOW()
);
ELSE

SELECT "EL USUARIO YA EXISTE" AS Mensanje;
END IF;
COMMIT;
END;
/*
NOMBRE: PRC_PERSONAS
DESCRIPCION: PROCEDIMIENTO PARA ACTUALIZAR SELECCIONAR Y ELIMINAR LOS DATOS
AUTOR: EMERSON EXEQUIEL RAMOS VELASQUEZ
VERSION: 1.0


 -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/



DROP PROCEDURE IF EXISTS PRC_PERSONAS;
 CREATE PROCEDURE PRC_PERSONAS(
    IN PV_USUARIO VARCHAR(100)
   ,IN PC_SEX_PERSONA CHAR (1)
   ,IN PI_EDAD_PERSONAL INT (2)
   ,IN PC_TIP_PERSONA CHAR (1)
   ,IN PV_NUM_IDENTIDAD VARCHAR (255)
   ,IN PC_IND_CIVIL CHAR (1)
   ,IN PI_NUM_TELEFONO INT(10)
   ,IN PC_TIP_TELEFONO CHAR(1)
   ,IN PV_OPERACION  VARCHAR (1)
   ,IN PI_FILA INT(1)
 )
 BEGIN
 DECLARE V_CODUSR BIGINT;
 START TRANSACTION;
 IF PV_OPERACION = 1 THEN
SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USUARIO INTO V_CODUSR;

INSERT INTO tbl_personas
(COD_USER, SEX_PERSONA, IND_CIVIL, EDA_PERSONAL, TIP_PERSONA, NUM_IDENTIDAD, FEC_REGISTRO) 
VALUES (V_CODUSR, PC_SEX_PERSONA, PC_IND_CIVIL, PI_EDAD_PERSONAL, PC_TIP_PERSONA, PV_NUM_IDENTIDAD,NOW());

 -- Seleccionar el maximo insertado en la tabla de PERSONAS
 Select @COD_PERSONA := MAX(COD_PERSONA) FROM TBL_personas;

 INSERT INTO tbl_telefonos
 (COD_PERSONA, NUM_TELEFONO, TIP_TELEFONO) 
 VALUES (@COD_PERSONA, PI_NUM_TELEFONO, PC_TIP_TELEFONO);


 SELECT @COD_TELEFONO := MAX(COD_TELEFONO) FROM tbl_telefonos;

 INSERT INTO rel_pertel
 (COD_TELEFONO, COD_PERSONA) 
 VALUES (@COD_TELEFONO, @COD_PERSONA);
 ELSEIF PV_OPERACION = 2 THEN
 SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USUARIO INTO V_CODUSR;
 UPDATE tbl_personas 
SET COD_USER = V_CODUSR , SEX_PERSONA = PC_SEX_PERSONA, IND_CIVIL = PC_IND_CIVIL, EDA_PERSONAL = PI_EDAD_PERSONAL, TIP_PERSONA = PC_TIP_PERSONA, NUM_IDENTIDAD = PV_Num_Identidad, FEC_REGISTRO = NOW() 
WHERE COD_PERSONA = PI_FILA
;

 -- Seleccionar el maximo insertado en la tabla de PERSONAS- Select @COD_PERSONA := MAX(COD_PERSONA) FROM TBL_personas;

 UPDATE tbl_telefonos 
 SET COD_PERSONA = @COD_PERSONA , NUM_TELEFONO = PI_NUM_TELEFONO, TIP_TELEFONO = PC_TIP_TELEFONO
 WHERE COD_TELEFONO = PI_FILA;

 SELECT @COD_TELEFONO := MAX(COD_TELEFONO) FROM tbl_telefonos;


 UPDATE rel_pertel 
 SET COD_TELEFONO = @COD_TELEFONO , COD_PERSONA = @COD_PERSONA 
 WHERE COD_PERTEL = PI_FILA;



 ELSEIF PV_OPERACION = 3 THEN
 DELETE FROM TBL_PERSONAS
 WHERE COD_PERSONA = PI_FILA;

 DELETE FROM TBL_TELEFONOS
 WHERE COD_TELEFONO = PI_FILA;

 ELSEIF PV_OPERACION = 4 THEN
 SELECT *
 FROM TBL_personas;

 SELECT * FROM TBL_TELEFONOS;


 ELSEIF PV_OPERACION = 5 THEN
 SELECT*FROM TBL_PERSONAS WHERE COD_PERSONA = PI_FILA;
 SELECT * FROM TBL_TELEFONOS WHERE COD_TELEFONO= PI_FILA;
 END IF;
 COMMIT;
 END;


/*
 NOMBRE: PRC_PREGUNTAS
 DESCRIPCION: PROCEDIMIENTO PARA INSERTAR PREGUNTA Y RESPUESTA DE USUARIO Y ACTUALIZAR CONTRASEÑA
 AUTOR: EMERSON EXEQUIEL RAMOS VELASQUEZ
 VERSION: 2.0
 -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
 */

DROP PROCEDURE IF EXISTS PRC_PREGUNTAS;

CREATE PROCEDURE PRC_PREGUNTAS(
  IN PV_PREGUNTA VARCHAR(255)
  , IN PV_RESPUESTA VARCHAR(255)
  , IN PV_USR VARCHAR(255)
  , IN PV_PASSWORD VARCHAR(100)
  ) 
  BEGIN 
	DECLARE V_CODUSR BIGINT;
	START TRANSACTION;
	SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USR INTO V_CODUSR;
	INSERT INTO tbl_ms_preg (PREGUNTA) VALUES (PV_PREGUNTA);
	INSERT INTO
	    tbl_ms_preg_usr (COD_USR, RESPUESTA)
	VALUES (V_CODUSR, PV_RESPUESTA);
	UPDATE
	    tbl_ms_hist_contrasegna
	SET CONTRASEGNA = PV_PASSWORD
	WHERE COD_USR = V_CODUSR;
	COMMIT;
END; 

 /*
NOMBRE: PRC_USERPREG
DESCRIPCION: PROCEDIMIENTO PARA BUSCAR PREGUNTA Y RESPUESTA DE USUARIO
AUTOR: EMERSON EXEQUIEL RAMOS VELASQUEZ
VERSION: 2.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
DROP PROCEDURE IF EXISTS PRC_USERPREG;
Create procedure PRC_USERPREG(
PV_USER VARCHAR(255),
PV_PREGUNTA VARCHAR(255),
PV_RESPUESTA VARCHAR(255),
PV_SELECCION VARCHAR(1)
)BEGIN
DECLARE V_CODUSR,V_CODPREG,V_RESPUESTA BIGINT;
START TRANSACTION;
IF PV_SELECCION = 'P' THEN
SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USER INTO V_CODUSR;
SELECT COD_PREG FROM tbl_ms_preg_usr WHERE COD_USR = V_CODUSR INTO V_CODPREG;
SELECT PREGUNTA FROM TBL_MS_PREG WHERE COD_PREG = V_CODPREG; 
ELSEIF PV_SELECCION = 'R' THEN
SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USER INTO V_CODUSR;
SELECT COD_PREG FROM tbl_ms_preg_usr WHERE COD_USR = V_CODUSR INTO V_CODPREG;
SELECT COUNT(RESPUESTA) FROM TBL_MS_PREG_USR WHERE COD_PREG = V_CODPREG AND COD_USR =  V_CODUSR AND RESPUESTA = PV_RESPUESTA INTO V_RESPUESTA;
IF V_RESPUESTA = 1 THEN
SELECT 1 AS ESTADO;
ELSE
SELECT 0 AS ESTADO;
END IF;
END IF;
COMMIT;
END;
/*
NOMBRE: SEL_USERANDEMAIL
DESCRIPCION: PROCEDIMIENTO PARA BUSCAR EL CORREO DE UNA PERSONA
AUTOR: EMERSON EXEQUIEL RAMOS VELASQUEZ
VERSION: 2.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
DROP PROCEDURE IF EXISTS SEL_USERANDEMAIL;
Create procedure SEL_USERANDEMAIL(
PV_USER VARCHAR(255)

)BEGIN
SELECT CORREO FROM TBL_MS_USR WHERE USR = PV_USER;
COMMIT;
END;

/*
NOMBRE: SEL_CONTROL
DESCRIPCION: PROCEDIMIENTO PARA CONTROL DE LOS DATOS DEL SISTEMA
AUTOR: EMERSON EXEQUIEL RAMOS VELASQUEZ
VERSION: 2.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/

DROP PROCEDURE IF EXISTS SEL_CONTROL;
CREATE PROCEDURE SEL_CONTROL(

)BEGIN
DECLARE V_USR,V_CUENTAS,V_SUBCUENTAS BIGINT;
DECLARE V_PERIODO VARCHAR(255);
START TRANSACTION;
SELECT COUNT(*) FROM TBL_MS_USR INTO V_USR;
SELECT COUNT(*) FROM TBL_CUENTAS INTO V_CUENTAS;
SELECT COUNT(*) FROM TBL_SUBCUENTAS INTO V_SUBCUENTAS;
SELECT MAX(NOM_PERIODO) FROM TBL_PERIODOS INTO V_PERIODO;
SELECT  V_USR AS USUARIOS,V_CUENTAS AS CUENTAS,V_SUBCUENTAS AS SUBCUENTAS,V_PERIODO AS PERIODO;
COMMIT;
END;
/*
NOMBRE: SEL_USERANDPASS
DESCRIPCION: PROCEDIMIENTO PARA VERIFICACION DE USUARIO Y CONTRASENA 
AUTOR: EMERSON EXEQUIEL RAMOS VELASQUEZ
VERSION: 2.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
DROP PROCEDURE IF EXISTS SEL_USERANDPASS;
Create PROCEDURE SEL_USERANDPASS(
   IN PV_USER VARCHAR(100)
  ,IN PV_PASS VARCHAR(100)
)BEGIN
DECLARE V_CODUSR BIGINT DEFAULT 0;
DECLARE V_PASS VARCHAR(255);
START TRANSACTION;

SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USER INTO V_CODUSR;

IF(V_CODUSR >0) THEN
SELECT CONTRASEGNA FROM TBL_MS_HIST_CONTRASEGNA WHERE COD_USR = V_CODUSR AND CONTRASEGNA = PV_PASS INTO V_PASS ;

IF(V_PASS = PV_PASS) THEN
SELECT 1;
ELSE 
SELECT 0;

END IF;
ELSE
SELECT 0;
END IF;
COMMIT;
END;

/*
NOMBRE: PRC_OPTIONS
DESCRIPCION: PROCEDIMIENTO PARA CONTROL DEL USUARIO
AUTOR: EMERSON EXEQUIEL RAMOS VELASQUEZ
VERSION: 2.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
DROP PROCEDURE IF EXISTS PRC_OPTIONS;
CREATE PROCEDURE PRC_OPTIONS(
    PV_USER VARCHAR(255)
)
BEGIN
START TRANSACTION;
SELECT EST_USR FROM TBL_MS_USR WHERE USR = PV_USER;
COMMIT;
END;
/*
NOMBRE: UPD_ESTADOUSR
DESCRIPCION: ACTUALIZAR EL ESTADO DEL USUARIO
AUTOR: EMERSON EXEQUIEL RAMOS VELASQUEZ
VERSION: 2.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
DROP PROCEDURE IF EXISTS UPD_ESTADOUSR;
CREATE PROCEDURE UPD_ESTADOUSR(
    PV_USER VARCHAR(255)
   ,PV_OPCION VARCHAR(255)
)
BEGIN
START TRANSACTION;
IF PV_OPCION = 1 THEN 

UPDATE tbl_ms_usr 
SET   EST_USR = 'ACTIVO'
WHERE USR = PV_USER
;
ELSEIF PV_OPCION = 2 THEN
UPDATE tbl_ms_usr 
SET   EST_USR = 'BLOQUEADO'
WHERE USR = PV_USER
;
ELSEIF PV_OPCION = 3 THEN
UPDATE tbl_ms_usr 
SET   EST_USR = 'INACTIVO'
WHERE USR = PV_USER
;
END IF ;
COMMIT;
END;

/*
NOMBRE: UPD_PASS
DESCRIPCION: ACTUALIZAR LA CONTRASENA DEL USUARIO
AUTOR: EMERSON EXEQUIEL RAMOS VELASQUEZ
VERSION: 2.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
DROP PROCEDURE IF EXISTS UPD_PASS;
CREATE PROCEDURE UPD_PASS(
    PV_USER VARCHAR(255)
   ,PV_PASS VARCHAR(255)
)
BEGIN
DECLARE V_USR BIGINT;
START TRANSACTION;
SELECT COD_USR FROM tbl_ms_usr WHERE USR = PV_USER INTO V_USR;
UPDATE tbl_ms_hist_contrasegna 
SET  CONTRASEGNA = PV_PASS
WHERE COD_USR = V_USR 
;
COMMIT;
END;


/*
NOMBRE: PROC_ESTADOS_RESULTADOS
DESCRIPCION: PROCEDIMIENTO PARA INSERTAR ELIMINAR ACTUALIZAR Y SELECIONAR LOS DATOS 
AUTOR: ZOILA MARGARITA LICONA
VERSION: 1.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
-- DROP PROCEDURE IF EXISTS PROC_ESTADOS_RESULTADOS;
-- CREATE PROCEDURE PROC_ESTADOS_RESULTADOS(
--      IN PV_NATURALEZA VARCHAR(255)
--     ,IN PB_PERIODO BIGINT
--     ,IN PB_PARAMETRO BIGINT
--     ,IN PB_COD_LIBMAYOR BIGINT
--     ,IN PV_NOMBRE_EMPRESA VARCHAR(255)
--     ,IN PV_VEN_NETAS VARCHAR(255)
--     ,IN PV_COS_VENTAS VARCHAR(255)
--     ,IN PV_UTI_BRUTA VARCHAR(255)
--     ,IN PV_TOT_GASTOS VARCHAR(255)
--     ,IN PV_UTI_ANTIMP VARCHAR(255)
--     ,IN PV_IMP_UTILIDAD VARCHAR(255)
--     ,IN PV_UTI_NETA VARCHAR(255)
--     ,IN PV_OPCION VARCHAR(1)
--     ,IN PB_FILA BIGINT
-- )BEGIN
--  START TRANSACTION;
  
--   IF PV_OPCION = 1 THEN

--   INSERT INTO tbl_estados_resultados
--   (COD_LIBMAYOR, COD_PERIODO, COD_PARAMETRO, EMPRESA, FEC_ESTADO, VEN_NETAS, COS_VENTAS, UTI_BRUTA, TOT_GASTOS, UTI_ANTIMP, IMP_UTILIDAD, UTI_NETA) 
--   VALUES (PB_COD_LIBMAYOR, PB_PERIODO, PB_PARAMETRO, PV_NOMBRE_EMPRESA, NOW(), PV_VEN_NETAS, PV_COS_VENTAS, PV_UTI_BRUTA, PV_TOT_GASTOS, PV_UTI_ANTIMP, PV_IMP_UTILIDAD,PV_UTI_NETA );
--   ELSEIF PV_OPCION = 2 THEN
--   UPDATE tbl_estados_resultados 
-- SET COD_LIBMAYOR = PB_COD_LIBMAYOR , COD_PERIODO = PB_PERIODO, COD_PARAMETRO = PB_PARAMETRO, EMPRESA = PV_NOMBRE_EMPRESA, FEC_ESTADO = NOW(), VEN_NETAS = PV_VEN_NETAS, COS_VENTAS = PV_COS_VENTAS, UTI_BRUTA = PV_UTI_BRUTA, TOT_GASTOS = PV_TOT_GASTOS, UTI_ANTIMP = PV_UTI_ANTIMP, IMP_UTILIDAD = PV_IMP_UTILIDAD, UTI_NETA = PV_UTI_NETA 
-- WHERE COD_ESTRESULTADO = PB_FILA;

--   ELSEIF PV_OPCION = 3 THEN
--   DELETE FROM stbl_estados_resultados 
-- WHERE COD_ESTRESULTADO  = PB_FILA;
--   ELSEIF PV_OPCION = 4 THEN
--   SELECT * FROM TBL_ESTADOS_RESULTADOS ;  
--     ELSEIF PV_OPCION = 5 THEN
--      SELECT * FROM TBL_ESTADOS_RESULTADOS WHERE COD_ESTRESULTADO  = PB_FILA; 
--   END IF;
-- COMMIT;
-- END;

DROP PROCEDURE IF EXISTS PRC_ESTADOS_RESULTADOS;
CREATE PROCEDURE PRC_ESTADOS_RESULTADOS(IN PB_CODPERIODO 
BIGINT) BEGIN 
-- VARIABLES DE LAS CLASIFICACIONES
DECLARE V_DESCUENTOi,
V_DESCUENTOg,
V_VENTAS,
V_SUELDOS,
V_GASTOSV,
V_GASTOS TINYINT;

-- VARIABLES DE LOS TOTALES

DECLARE V_TOTING,
V_TOTDES,
V_TOTVENTAS,
V_IMP,
V_TOTGASTOS,
V_TOTSUELDOS,
V_TOTGASTOSV DECIMAL(8, 2) DEFAULT 0;

-- VARIABLES DE SALIDAS

DECLARE VENTAS_NETAS,
COS_VENTAS,
UTI_BRUTA,
TOT_GASTOS,
UTI_ANTIMP,
IMP_UTILIDAD,
UTI_NETA DECIMAL(8, 2) DEFAULT 0; START TRANSACTION;
 /* OBTENER COD DE CLASIFICACION DE LAS CUENTAS */
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'DESCUENTO_I' INTO V_DESCUENTOi;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'DESCUENTO_G' INTO V_DESCUENTOg;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'VENTAS' INTO V_VENTAS;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'GASTOS' INTO V_GASTOS;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'GASTOSV' INTO V_GASTOSV;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'SUELDOS' INTO V_SUELDOS;
 /* -------------------------------------------------------------------- */
  /* OBTENER SALDOS  DESCUENTOS  DE INGRESO*/
  SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_DESCUENTOi INTO V_TOTING;

   /* OBTENER TOTAL DE SALDOS DE VENTAS */
  SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_VENTAS INTO V_TOTVENTAS;
 -- TOTAL SUELDOS
   SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_SUELDOS INTO V_TOTSUELDOS;
   
   -- TOTAL DE GASTOS VENTAS
  SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_GASTOSV INTO V_TOTGASTOSV;

  /* OBTENER SALDOS DE LOS DESCUENTOS  DE GASTOS*/
  SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_DESCUENTOg INTO V_TOTDES;
  /* OBTENER TOTAL DE SALDOS DE GASTOS TOTALES*/
  SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_GASTOS INTO V_TOTGASTOS;
  /* RECUPERAR EL IMPUESTO */
  SELECT CAST(VALOR AS DECIMAL(8,2)) FROM tbl_ms_parametros WHERE PARAMETRO = 'IMP_UTILIDAD' INTO V_IMP;
   
    /* ASIGNARLE VALOR A LAS VARIABLES */
SET VENTAS_NETAS = V_TOTVENTAS - V_TOTING;

SET COS_VENTAS = V_TOTSUELDOS + V_TOTGASTOSV;

SET UTI_BRUTA = VENTAS_NETAS - COS_VENTAS;

SET TOT_GASTOS = V_TOTGASTOS;

SET UTI_ANTIMP = UTI_BRUTA - TOT_GASTOS;
-- validar numero negativos 
SET IMP_UTILIDAD = UTI_ANTIMP * V_IMP;

SET UTI_NETA = UTI_ANTIMP - IMP_UTILIDAD;

/* DEVOLVER VALORES  */
SELECT
    VENTAS_NETAS,
    COS_VENTAS,
    UTI_BRUTA,
    TOT_GASTOS,
    UTI_ANTIMP,
    IMP_UTILIDAD,
    UTI_NETA;

COMMIT;
END;



/*
NOMBRE: PRC_COMPROBANTES
DESCRIPCION: PROCEDIMIENTO PARA INSERTAR ELIMINAR ACTUALIZAR Y SELECIONAR LOS DATOS 
AUTOR: EMERSON EXEQUIEL RAMOS VELASQUEZ
VERSION: 1.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/


/*COMPROBANTES*/

DROP PROCEDURE IF EXISTS PRC_COMPROBANTES;
CREATE PROCEDURE PRC_COMPROBANTES(
   IN PB_COD_LIBDIARIO   BIGINT 
  ,IN PV_COMPROBANTE     VARCHAR(255)  
  ,IN PV_DES_COMPROBANTE VARCHAR(100) 
  ,IN PV_OPCION          VARCHAR(255)
  ,IN PB_FILA            BIGINT
)
BEGIN
START TRANSACTION;
IF PV_OPCION = 1 THEN
INSERT INTO tbl_comprobantes
(COD_LIBDIARIO, FEC_COMPROBANTE, COMPROBANTE, DES_COMPROBANTE) 
VALUES (PB_COD_LIBDIARIO, NOW(), PV_COMPROBANTE, PV_DES_COMPROBANTE);
ELSEIF PV_OPCION = 2 THEN 
UPDATE tbl_comprobantes 
SET COD_LIBDIARIO = PB_COD_LIBDIARIO , FEC_COMPROBANTE = NOW(), COMPROBANTE = PV_COMPROBANTE, DES_COMPROBANTE = PV_DES_COMPROBANTE
WHERE COD_COMPROBANTE = PB_FILA;
ELSEIF PV_OPCION = 3 THEN 
DELETE FROM TBL_COMPROBANTES WHERE COD_COMPROBANTE = PB_FILA;
ELSEIF PV_OPCION = 4 THEN 
SELECT * FROM TBL_COMPROBANTES;
ELSEIF PV_OPCION = 5 THEN 
SELECT * FROM TBL_COMPROBANTES WHERE COD_COMPROBANTE = PB_FILA;
END IF ;
COMMIT;
END;




/*
NOMBRE: PRC_LIBROS_MAYORES
DESCRIPCION: PROCEDIMIENTO PARA INSERTAR ELIMINAR ACTUALIZAR Y SELECIONAR LOS DATOS 
AUTOR: KEVIN ALVARADO BUEZO
VERSION: 1.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
DROP PROCEDURE IF EXISTS PRC_LIBROS_MAYORES;
CREATE PROCEDURE PRC_LIBROS_MAYORES(
  IN PB_COD_PERIODO BIGINT                                                                        
, IN PV_NOM_CUENTA   VARCHAR(255) 
, IN PD_SALDEBE      DECIMAL(8,2)
, IN PD_SALHABER     DECIMAL(8,2)
, IN PV_OPERACION VARCHAR (1)
, IN PB_FILA BIGINT 
)

BEGIN
DECLARE V_CODCUENTA,V_CLASIFICACION,V_CODGRUPO BIGINT;
DECLARE V_TOTDEBE, V_TOTHABER DECIMAL(8,2);
DECLARE V_NOMBRE,V_NUMSUB,V_ESTADOCUENTA VARCHAR(255);
START TRANSACTION;
/*INSERTAR CUENTAS QUE EXISTEN EN LIBRO DIARIO*/
IF PV_OPERACION = 1 THEN

SELECT COD_CLASIFICACION, COD_CUENTA,NUM_CUENTA, COD_GRUPO FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_CODCUENTA,V_NUMSUB,V_CODGRUPO;
SELECT SUM(SAL_DEBE),SUM(SAL_HABER)  FROM TBL_LIBROS_DIARIOS where COD_CUENTA = V_CODCUENTA AND COD_PERIODO = PB_COD_PERIODO INTO  V_TOTDEBE, V_TOTHABER ;
SELECT COD_ESTCUENTA FROM TBL_ESTADOS_CUENTAS WHERE COD_CUENTA = V_CODCUENTA INTO V_ESTADOCUENTA;
INSERT INTO tbl_libros_mayores
(COD_CUENTA, COD_CLASIFICACION, COD_PERIODO, COD_ESTCUENTA,COD_GRUPO, NUM_CUENTA, NOM_CUENTA, SAL_DEBE, SAL_HABER, FEC_LIBMAYOR) 
VALUES (V_CODCUENTA, V_CLASIFICACION, PB_COD_PERIODO, V_ESTADOCUENTA,V_CODGRUPO, V_NUMSUB, PV_NOM_CUENTA, V_TOTDEBE, V_TOTHABER, NOW());

UPDATE tbl_estados_cuentas 
SET  EST_CUENTA = 'PROCESADA'
WHERE COD_CUENTA = V_CODCUENTA;

ELSEIF PV_OPERACION = 2 THEN
SELECT COD_CLASIFICACION, COD_CUENTA,NUM_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_CODCUENTA,V_NUMSUB;
SELECT COD_ESTCUENTA FROM TBL_ESTADOS_CUENTAS WHERE COD_CUENTA = V_CODCUENTA INTO V_ESTADOCUENTA;

UPDATE TBL_LIBROS_MAYORES
SET COD_CUENTA = V_CODCUENTA , COD_PERIODO = PB_COD_PERIODO,COD_ESTCUENTA =V_ESTADOCUENTA, NUM_CUENTA = V_NUMSUB,NOM_CUENTA = PV_NOM_CUENTA, SAL_DEBE = PD_SALDEBE, SAL_HABER = PD_SALHABER, FEC_LIBMAYOR=NOW()
WHERE COD_LIBMAYOR = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM TBL_LIBROS_MAYORES 
WHERE COD_LIBMAYOR = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_LIBROS_MAYORES;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_LIBROS_MAYORES WHERE COD_LIBMAYOR = PB_FILA;

/*INSERTAR CUENTAS QUE NO EXISTEN EN LIBRO DIARIO */
ELSEIF PV_OPERACION = 6 THEN 
SELECT COD_CLASIFICACION, COD_CUENTA,NUM_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_CODCUENTA,V_NUMSUB;
SELECT COD_ESTCUENTA FROM TBL_ESTADOS_CUENTAS WHERE COD_CUENTA = V_CODCUENTA INTO V_ESTADOCUENTA;
INSERT INTO tbl_libros_mayores
(COD_CUENTA, COD_CLASIFICACION, COD_PERIODO, COD_ESTCUENTA, NUM_CUENTA, NOM_CUENTA, SAL_DEBE, SAL_HABER, FEC_LIBMAYOR) 
VALUES (V_CODCUENTA, V_CLASIFICACION, PB_COD_PERIODO, V_ESTADOCUENTA, V_NUMSUB, PV_NOM_CUENTA , PD_SALDEBE, PD_SALHABER, NOW());
END IF;
COMMIT;
END;





-- DROP PROCEDURE IF EXISTS PRC_LIBROS_MAYORES;
-- CREATE PROCEDURE PRC_LIBROS_MAYORES(
--   IN PB_COD_PERIODO BIGINT                                                                        
-- , IN PV_NOM_CUENTA   VARCHAR(255) 
-- , IN PD_SALDEBE      DECIMAL(8,2)
-- , IN PD_SALHABER     DECIMAL(8,2)
-- , IN PV_OPERACION VARCHAR (1)
-- , IN PB_FILA BIGINT 
-- )

-- BEGIN
-- DECLARE V_CODCUENTA,V_CLASIFICACION,V_CODGRUPO BIGINT;
-- DECLARE V_TOTDEBE, V_TOTHABER DECIMAL(8,2);
-- DECLARE V_NOMBRE,V_NUMSUB,V_ESTADOCUENTA VARCHAR(255);
-- START TRANSACTION;
-- /*INSERTAR CUENTAS QUE EXISTEN EN LIBRO DIARIO*/
-- IF PV_OPERACION = 1 THEN

-- SELECT COD_CLASIFICACION, COD_CUENTA,NUM_CUENTA, COD_GRUPO FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_CODCUENTA,V_NUMSUB,V_CODGRUPO;
-- SELECT SUM(SAL_DEBE),SUM(SAL_HABER)  FROM TBL_LIBROS_DIARIOS where COD_CUENTA = V_CODCUENTA AND COD_PERIODO = PB_COD_PERIODO INTO  V_TOTDEBE, V_TOTHABER ;
-- SELECT COD_ESTCUENTA FROM TBL_ESTADOS_CUENTAS WHERE COD_CUENTA = V_CODCUENTA INTO V_ESTADOCUENTA;
-- INSERT INTO tbl_libros_mayores
-- (COD_CUENTA, COD_CLASIFICACION, COD_PERIODO, COD_ESTCUENTA,COD_GRUPO, NUM_CUENTA, NOM_CUENTA, SAL_DEBE, SAL_HABER, FEC_LIBMAYOR) 
-- VALUES (V_CODCUENTA, V_CLASIFICACION, PB_COD_PERIODO, V_ESTADOCUENTA,V_CODGRUPO, V_NUMSUB, PV_NOM_CUENTA, V_TOTDEBE, V_TOTHABER, NOW());

-- UPDATE tbl_estados_cuentas 
-- SET  EST_CUENTA = 'PROCESADA'
-- WHERE COD_CUENTA = V_CODCUENTA;

-- ELSEIF PV_OPERACION = 2 THEN
-- SELECT COD_CLASIFICACION, COD_CUENTA,NUM_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_CODCUENTA,V_NUMSUB;
-- SELECT COD_ESTCUENTA FROM TBL_ESTADOS_CUENTAS WHERE COD_CUENTA = V_CODCUENTA INTO V_ESTADOCUENTA;

-- UPDATE TBL_LIBROS_MAYORES
-- SET COD_CUENTA = V_CODCUENTA , COD_PERIODO = PB_COD_PERIODO,COD_ESTCUENTA =V_ESTADOCUENTA, NUM_CUENTA = V_NUMSUB,NOM_CUENTA = PV_NOM_CUENTA, SAL_DEBE = PD_SALDEBE, SAL_HABER = PD_SALHABER, FEC_LIBMAYOR=NOW()
-- WHERE COD_LIBMAYOR = PB_FILA;

-- ELSEIF PV_OPERACION = 3 THEN

-- DELETE FROM TBL_LIBROS_MAYORES 
-- WHERE COD_LIBMAYOR = PB_FILA; 

-- ELSEIF PV_OPERACION = 4 THEN

-- SELECT * FROM TBL_LIBROS_MAYORES;

-- ELSEIF PV_OPERACION = 5 THEN
-- SELECT * FROM TBL_LIBROS_MAYORES WHERE COD_LIBMAYOR = PB_FILA;

-- /*INSERTAR CUENTAS QUE NO EXISTEN EN LIBRO DIARIO */
-- ELSEIF PV_OPERACION = 6 THEN 
-- SELECT COD_CLASIFICACION, COD_CUENTA,NUM_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_CODCUENTA,V_NUMSUB;
-- SELECT COD_ESTCUENTA FROM TBL_ESTADOS_CUENTAS WHERE COD_CUENTA = V_CODCUENTA INTO V_ESTADOCUENTA;
-- INSERT INTO tbl_libros_mayores
-- (COD_CUENTA, COD_CLASIFICACION, COD_PERIODO, COD_ESTCUENTA, NUM_CUENTA, NOM_CUENTA, SAL_DEBE, SAL_HABER, FEC_LIBMAYOR) 
-- VALUES (V_CODCUENTA, V_CLASIFICACION, PB_COD_PERIODO, V_ESTADOCUENTA, V_NUMSUB, PV_NOM_CUENTA , PD_SALDEBE, PD_SALHABER, NOW());
-- END IF;
-- COMMIT;
-- END;




/*
--------------------MODULO DE MANTENIMIENTO -----------------------------------------
*/

/*
NOMBRE: PRC_OBJETOS
DESCRIPCION: PROCEDIMIENTO PARA INSERTAR ELIMINAR ACTUALIZAR Y SELECIONAR LOS DATOS 
AUTOR: SCARLETH CANALES
VERSION: 1.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/

DROP PROCEDURE IF EXISTS PRC_OBJETOS;
CREATE PROCEDURE PRC_OBJETOS(
        IN PV_OBJETO   VARCHAR(100) 
      , IN PV_DES_OBJETO VARCHAR(100)
      , IN PV_TIP_OBJETO   VARCHAR(15) 
      , IN PV_OPERACION VARCHAR(1)
      , IN PB_FILA   BIGINT  
)
BEGIN
START TRANSACTION;
IF PV_OPERACION = 1 THEN

INSERT INTO tbl_objetos
( OBJETO, DES_OBJETO, TIP_OBJETO) 
VALUES ( PV_OBJETO, PV_DES_OBJETO, PV_TIP_OBJETO);


ELSEIF PV_OPERACION = 2 THEN

UPDATE tbl_objetos
SET OBJETO = PV_OBJETO, DES_OBJETO = PV_DES_OBJETO, TIP_OBJETO = PV_TIP_OBJETO 
WHERE COD_OBJETO = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM tbl_objetos
WHERE COD_OBJETO = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_OBJETOS;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_OBJETOS WHERE COD_OBJETO = PB_FILA;

END IF;
COMMIT;
END;

/*
--------------------MODULO DE MANTENIMIENTO -----------------------------------------
*/

/*
NOMBRE: PRC_CLASIFICACIONES
DESCRIPCION: PROCEDIMIENTO PARA INSERTAR ELIMINAR ACTUALIZAR Y SELECIONAR LOS DATOS 
AUTOR: SCARLETH CANALES
VERSION: 1.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/

DROP PROCEDURE IF EXISTS PRC_CLASIFICACIONES;
CREATE PROCEDURE PRC_CLASIFICACIONES(
        IN PV_NATURALEZA   VARCHAR(255)
      , IN PV_OPERACION VARCHAR(1)
      , IN PB_FILA   BIGINT  
)
BEGIN
START TRANSACTION;
IF PV_OPERACION = 1 THEN

INSERT INTO tbl_clasificaciones
( NATURALEZA) 
VALUES ( PV_NATURALEZA);


ELSEIF PV_OPERACION = 2 THEN

UPDATE tbl_clasificaciones
SET  NATURALEZA = PV_NATURALEZA 
WHERE COD_CLASIFICACION = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM tbl_clasificaciones
WHERE COD_CLASIFICACION = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_CLASIFICACIONES;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_CLASIFICACIONES WHERE COD_CLASIFICACION = PB_FILA;

END IF;
COMMIT;
END;

/*
--------------------MODUOO DE MANTENIMIENTO -----------------------------------------
*/

/*
NOMBRE: PRC_PERIODOS
DESCRIPCION: PROCEDIMIENTO PARA INSERTAR ELIMINAR ACTUALIZAR Y SELECIONAR LOS DATOS 
AUTOR: SCARLETH CANALES
VERSION: 1.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
DROP PROCEDURE IF EXISTS PRC_PERIODOS;
CREATE PROCEDURE PRC_PERIODOS(
        IN PB_COD_USUARIO   BIGINT
      , IN PV_NOM_PERIODO VARCHAR(100)
      , IN PF_FEC_INI  DATETIME 
      , IN PF_FEC_FIN DATETIME
      , IN PV_ESTADO  VARCHAR(255)
      , IN PV_OPERACION VARCHAR(1)
      , IN PB_FILA   BIGINT  
)
BEGIN
START TRANSACTION;
IF PV_OPERACION = 1 THEN



INSERT INTO tbl_periodos
( COD_USUARIO,FEC_PERIODO, NOM_PERIODO, FEC_INI, FEC_FIN,ESTADO) 
VALUES ( PB_COD_USUARIO,NOW(),PV_NOM_PERIODO , PF_FEC_INI, PF_FEC_FIN,PV_ESTADO);


ELSEIF PV_OPERACION = 2 THEN

UPDATE tbl_periodos
SET  COD_USUARIO = PB_COD_USUARIO, FEC_PERIODO = NOW(), NOM_PERIODO = PV_NOM_PERIODO, FEC_INI = PF_FEC_INI, FEC_FIN = PF_FEC_FIN
,ESTADO =PV_ESTADO WHERE COD_PERIODO = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM tbl_periodos
WHERE COD_PERIODO = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_PERIODOS;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_PERIODOS WHERE COD_PERIODO = PB_FILA;

END IF;
COMMIT;
END;

/*--------------------------------MODULO DE SEGURIDAD----------------------------------------------------*/
/*--------------PROC ROLES-------------------*/
/*
NOMBRE: PRC_MS_ROLES
DESCRIPCION: PROCEDIMIENTO PARA INSERTAR ELIMINAR ACTUALIZAR Y SELECIONAR LOS DATOS 
AUTOR: NOE GARCIA
VERSION: 1.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/

DROP PROCEDURE IF EXISTS PRC_MS_ROLES;
CREATE PROCEDURE PRC_MS_ROLES(
        IN PV_TIP_ROL  VARCHAR(30) 
      , IN PV_DES_ROL  VARCHAR(50)
      , IN PV_OPERACION VARCHAR(1)
      , IN PB_FILA   BIGINT 
)
BEGIN
START TRANSACTION;
IF PV_OPERACION = 1 THEN

INSERT INTO tbl_ms_roles
(ROL, DES_ROL) 
VALUES (PV_TIP_ROL, PV_DES_ROL);

ELSEIF PV_OPERACION = 2 THEN

UPDATE tbl_ms_roles 
SET  ROL = PV_TIP_ROL, DES_ROL = PV_DES_ROL 
WHERE COD_ROL = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM tbl_ms_roles 
WHERE COD_ROL = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_MS_ROLES;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_MS_ROLES WHERE COD_ROL = PB_FILA;

END IF;
COMMIT;
END;
/*---------------------------------------------------------*/
/*
NOMBRE: PRC_ROLES_OBJETOS
DESCRIPCION: PROCEDIMIENTO PARA INSERTAR ELIMINAR ACTUALIZAR Y SELECIONAR LOS DATOS 
AUTOR: NOE GARCIA
VERSION: 1.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/

/*--------------PROCEDIMIENTOS DE ROLES OBJETOS------------*/

DROP PROCEDURE IF EXISTS PRC_ROLES_OBJETOS;
CREATE PROCEDURE PRC_ROLES_OBJETOS(
        IN PB_COD_ROL  BIGINT 
      , IN PB_COD_OBJETO  BIGINT 
      , IN PV_PER_EDICION  VARCHAR(1)
      , IN PV_PER_ELIMINAR  VARCHAR(1)
      , IN PV_PER_ACTUALIZAR  VARCHAR(1)
      , IN PF_FEC_CREACION  DATE
      , IN PV_CRERADO_POR  VARCHAR(100)
      , IN PF_FEC_MODIFICACION  DATE
      , IN PV_MOD_POR  VARCHAR(100)
      , IN PV_OPERACION VARCHAR(1)
      , IN PB_FILA   BIGINT 
)
BEGIN
START TRANSACTION;
IF PV_OPERACION = 1 THEN

INSERT INTO tbl_roles_objetos
(COD_ROL, COD_OBJETO, PER_EDICION, PER_ELIMINAR, PER_ACTUALIZAR, FEC_CREACION, CREADO_POR, FEC_MODIFICACION, MOD_POR) 
VALUES (PB_COD_ROL, PB_COD_OBJETO, PV_PER_EDICION, PV_PER_ELIMINAR, PV_PER_ACTUALIZAR, PF_FEC_CREACION, PV_CREADO_POR, PF_FEC_MODIFICACION, PV_MOD_POR);


ELSEIF PV_OPERACION = 2 THEN

UPDATE tbl_ms_roles 
SET COD_ROL=PB_COD_ROL, COD_OBJETO=PB_COD_OBJETO, PER_EDICION=PV_PER_EDICION, 
PER_ELIMINAR=PV_PER_ELIMINAR, PER_ACTUALIZAR=PV_PER_ACTUALIZAR, FEC_CREACION=PF_FEC_CREACION, 
CREADO_POR=PV_CREADO_POR, FEC_MODIFICACION=PF_FEC_MODIFICACION, MOD_POR=PV_MOD_POR 
WHERE COD_ROL = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM tbl_roles_objetos 
WHERE COD_ROL = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_MS_ROLES;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_ROLES_OBJETOS WHERE COD_ROL = PB_FILA;

END IF;
COMMIT;
END;
/*------------------------------------------------------------*/
/*
NOMBRE: PRC_PERMISOS
DESCRIPCION: PROCEDIMIENTO PARA INSERTAR ELIMINAR ACTUALIZAR Y SELECIONAR LOS DATOS 
AUTOR: NOE GARCIA
VERSION: 1.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
/*--------------PROC PERMISOS-----------------*/

DROP PROCEDURE IF EXISTS PRC_PERMISOS;
CREATE PROCEDURE PRC_PERMISOS(
        IN PB_COD_ROL  BIGINT 
      , IN PB_COD_OBJETO  BIGINT 
      , IN PV_PER_INSERCION  VARCHAR(1)
      , IN PV_PER_ELIMINAR  VARCHAR(1)
      , IN PV_PER_ACTUALIZAR  VARCHAR(1)
      , IN PV_PER_CONSULTAR  VARCHAR(1)
      , IN PV_OPERACION VARCHAR(1)
      , IN PB_FILA   BIGINT 
)
BEGIN
START TRANSACTION;
IF PV_OPERACION = 1 THEN

INSERT INTO tbl_permisos
(COD_ROL, COD_OBJETO, PER_INSERCION, PER_ELIMINAR, PER_ACTUALIZAR, PER_CONSULTAR) 
VALUES (PB_COD_ROL, PB_COD_OBJETO, PV_PER_INSERCION, PV_PER_ELIMINAR, PV_PER_ACTUALIZAR, PV_PER_CONSULTAR);


ELSEIF PV_OPERACION = 2 THEN

UPDATE tbl_permisos 
SET COD_ROL=PB_COD_ROL, COD_OBJETO=PB_COD_OBJETO, PER_INSERCION=PV_PER_INSERCION, 
PER_ELIMINAR=PV_PER_ELIMINAR, PER_ACTUALIZAR=PV_PER_ACTUALIZAR, PER_CONSULTAR=PV_PER_CONSULTAR 
WHERE COD_ROL = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM tbl_permisos
WHERE COD_ROL = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_PERMISOS;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_PERMISOS WHERE COD_ROL = PB_FILA;

END IF;
COMMIT;
END;
/*---------------------------------------------------------*/
/*
NOMBRE: TRG_BITACORA
DESCRIPCION: TRIGGER PARA REGISTRAS LAS ACCIONES DEL SISTEMA
AUTOR: NOE GARCIA
VERSION: 1.0


  -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/
/*---------------TRIGGER BITACORA--------------------------*/
CREATE TRIGGER Bitacora after insert on TBL_MS_USR
for each row
BEGIN 
declare cont BIGINT;
set cont = (SELECT COUNT(*) FROM TBL_OBJETOS);
insert into TBL_MS_BITACORAS (FEC_REGISTRO, USR_REGISTRA, COD_USR, ACC_SISTEMA, DES_BITACORA,COD_OBJETO)
values (now(),current_user(), new.COD_USR, new.PRIMER_ACC,new.CORREO,cont);
END;
/*----------------------------------------------------------*/


-- /////////////////// SELECCIONAR MS USR ////////////////////////////////

DROP PROCEDURE IF EXISTS PROC_MS_USR_SELECCIONAR;
CREATE  PROCEDURE `PROC_MS_USR_SELECCIONAR`(
/*
 * NOMBRE : SELECCIONAR TABLAS MS USR
 * DESCRIPCIÓN : PROCEDIMIENTOS SELECCIONAR TBL_MS_USR
 * AUTOR: JEYSON MÓRAN
 * VERSION : 1.0  
 * */)
BEGIN
	START TRANSACTION;
SELECT 
COD_USR AS CODIGO_USUARIO,
USR AS USUARIO,
NOM_USR AS NOMBRE_USUARIO,
EST_USR AS ESTADO_USUARIO,
COD_ROL AS ROL_USUARIO,
FEC_ULT_CONN AS FECHA_ULTIMO_ACCESO,
PREG_RES AS PREGUNTA_RESPONDIDA,
PRIMER_ACC AS PRIMER_ACCESO,
CORREO AS CORREO_ELECTRONICO
FROM TBL_MS_USR;

SELECT
COD_PREG AS CODIGO_PREGUNTA,
PREGUNTA AS PREGUNTA
FROM TBL_MS_PREG;

SELECT 
COD_PREG AS CODIGO_RESPUESTA,
RESPUESTA AS RESPUESTA
FROM TBL_MS_PREG_USR;

COMMIT;
END;

-- /////////////////// ELIMINAR POR NUMERO CODIGO ////////////////////////////////
DROP PROCEDURE IF EXISTS PROC_MS_USR_ELIMINAR;
CREATE  PROCEDURE PROC_MS_USR_ELIMINAR(
  /*
 * NOMBRE : ELIMINAR TABLAS NUMERO CODIGO
 * DESCRIPCIÓN : PROCEDIMIENTOS ELIMINAR TBL_MS_USR
 * AUTOR: JEYSON MÓRAN
 * VERSION : 1.0  
 * */
  IN PB_COD BIGINT(20)
)
BEGIN
	START TRANSACTION;
DELETE FROM TBL_MS_USR WHERE COD_USR = PB_COD;
DELETE FROM TBL_MS_PREG WHERE COD_PREG  = PB_COD;
DELETE FROM TBL_MS_PREG_USR WHERE COD_PREG = PB_COD;
DELETE FROM TBL_MS_HIST_CONTRASEGNA WHERE COD_HIST_CONTRA = PB_COD;
DELETE FROM TBL_MS_BITACORA_USR  WHERE COD_BITACORA_USR  = PB_COD;
COMMIT;
END;

-- /////////////////// INSERTAR USUARIO ////////////////////////////////

DROP PROCEDURE IF EXISTS PROC_MS_USR_INSERTAR;
CREATE  PROCEDURE `PROC_MS_USR_INSERTAR`(
/*
 * NOMBRE : INSERTAR TABLAS MS USUARIOS
 * DESCRIPCIÓN : PROCEDIMIENTOS INSERTAR TBL_MS_USR
 * AUTOR: JEYSON MÓRAN
 * VERSION : 1.0  
 * */
 -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PTI = PARAMETRO TYNINT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
 -- PARAMETROS:

IN PV_USR 			VARCHAR(50),
IN PV_NOM_USR 		VARCHAR(100),
IN PB_COD_ROL       BIGINT,
IN PF_FEC_ULT_CONN 	DATE, 
IN PB_PREG_RES		BIGINT(20), 
IN PB_PRIMER_ACC 		BIGINT(20), 
IN PV_CORREO 			VARCHAR(100), 
IN PV_PREGUNTA 		VARCHAR(100), 
IN PV_RESPUESTA 		VARCHAR(100), 
IN PV_CONTRASEGNA 	VARCHAR(32)

)
BEGIN
	START TRANSACTION;

SELECT  @USR := COUNT(COD_USR) FROM TBL_MS_USR;

IF @USR = 0 THEN 
	ALTER TABLE TBL_MS_USR  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_PREG  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_PREG_USR  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_HIST_CONTRASEGNA  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_BITACORA_USR AUTO_INCREMENT = 0;
END IF;

-- INSERTAR TABLA MS USUARIOS
INSERT INTO TBL_MS_USR(
USR,
NOM_USR,
COD_ROL,
FEC_ULT_CONN,	 		
PREG_RES,				
PRIMER_ACC, 				
CORREO)
VALUES(
PV_USR,
PV_NOM_USR,
PB_COD_ROL,
PF_FEC_ULT_CONN,	 		
PB_PREG_RES,				
PB_PRIMER_ACC, 				
PV_CORREO
);


-- INSERTAR TABLA MS PREGUNTAS
INSERT INTO TBL_MS_PREG(
PREGUNTA)
VALUES(
PV_PREGUNTA
);

SELECT @COD_USR := MAX(COD_USR) FROM TBL_MS_USR;

-- INSERTAR TABLA MS PREGUNTAS USUARIOS
INSERT INTO TBL_MS_PREG_USR(
COD_USR,
RESPUESTA)
VALUES(
@COD_USR,
PV_RESPUESTA
);

-- INSERTAR TABLA HISTORIAL CONTRASEÑA
INSERT INTO TBL_MS_HIST_CONTRASEGNA(
COD_USR,
CONTRASEGNA)
VALUES(
@COD_USR,
PV_CONTRASEGNA
);
SELECT @COD_CONTRA := MAX(COD_HIST_CONTRA) FROM TBL_MS_HIST_CONTRASEGNA;
-- INSERTAR TABLA BITACORA USUARIOS
INSERT INTO TBL_MS_BITACORA_USR (
COD_USR,
COD_CONTRA,
USR_CREA_POR,
USR_MODF_POR,
USR_FEC_CREA,
USR_FEC_MODF, 
CONTRA_CREA_POR, 
CONTRA_MODF_POR, 
CONTRA_FEC_CREA, 
CONTRA_FEC_MODF)
VALUES(
@COD_USR,
@COD_CONTRA,
CURRENT_USER(),
CURRENT_USER(),
NOW(),
NOW(),
CURRENT_USER(),
CURRENT_USER(),
NOW(),
NOW()
);


COMMIT;
END;

-- /////////////////// ACTUALIZAR USUARIO ////////////////////////////////

DROP PROCEDURE IF EXISTS PROC_MS_USR_ACTUALIZAR;
CREATE PROCEDURE PROC_MS_USR_ACTUALIZAR(
/*
 * NOMBRE : ACTUALIZAR TABLAS MS USUARIOS
 * DESCRIPCIÓN : PROCEDIMIENTOS ACTUALIZAR TBL_MS_USR
 * AUTOR: JEYSON MÓRAN
 * VERSION : 1.0  
 * */
 -- PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PTI = PARAMETRO TYNINT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
 -- PARAMETROS:

 IN PV_USR             		VARCHAR(50),
 IN PV_NOM_USR		    	VARCHAR(100),
 IN PEM_EST_USR       		ENUM('BLOQUEADO', 'ACTIVO','INACTIVO','NUEVO'), 
 IN PB_COD_ROL              BIGINT,
 IN PF_FEC_ULT_CONN	 		DATE,
 IN PB_PREG_RES				BIGINT(20),
 IN PB_PRIMER_ACC 			BIGINT(20),
 IN PV_CORREO 				VARCHAR(100),
 IN PV_PREGUNTA 			VARCHAR(100),
 IN PV_RESPUESTA 			VARCHAR(100),
 IN PB_FILA 				BIGINT(20)
 
)
BEGIN
	START TRANSACTION;

SELECT  @USR := COUNT(COD_USR) FROM TBL_MS_USR;

IF @USR = 0 THEN 
	ALTER TABLE TBL_MS_USR  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_PREG  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_PREG_USR  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_HIST_CONTRASEGNA  AUTO_INCREMENT = 0;
END IF;

-- ACTUALIZAR TABLA MS USUARIOS
	UPDATE TBL_MS_USR 
	SET USR			 = PV_USR,
		NOM_USR		 = PV_NOM_USR,
        COD_ROL      = PB_COD_ROL,
		EST_USR 	 = PEM_EST_USR,
		FEC_ULT_CONN = PF_FEC_ULT_CONN, 				
		CORREO		 = PV_CORREO
	WHERE COD_USR = PB_FILA;

-- ACTUALIZAR TABLA MS PREGUNTAS
	UPDATE TBL_MS_PREG  
	SET PREGUNTA = PV_PREGUNTA
	WHERE COD_PREG = PB_FILA;

-- ACTUALIZAR TABLA MS PREGUNTAS USUARIOS
	UPDATE TBL_MS_PREG_USR  
	SET RESPUESTA = PV_RESPUESTA
	WHERE COD_PREG = PB_FILA;
  
-- ACTUALIZAR TABLA MS BITACORA USUARIOS
 	UPDATE TBL_MS_BITACORA_USR  
	SET USR_MODF_POR = CURRENT_USER(),
		USR_FEC_MODF = NOW()
	WHERE COD_BITACORA_USR = PB_FILA;

	
COMMIT;
END;

-- /////////////////// MODIFICAR CONTRASEÑA ////////////////////////////////
DROP PROCEDURE IF EXISTS PROC_MS_USR_MODF_CONTRA;
CREATE PROCEDURE PROC_MS_USR_MODF_CONTRA(
  /*
 * NOMBRE : MODIFICAR TABLAS MS USR CONTRSEÑA
 * DESCRIPCIÓN : PROCEDIMIENTOS MODIFICAR TBL_MS_USR CONTRASEÑA
 * AUTOR: JEYSON MÓRAN
 * VERSION : 1.0  
 * */
 	IN PV_CONTRASEGNA VARCHAR(32),
 	IN PB_COD BIGINT(20)
 	
)
BEGIN
	START TRANSACTION;
-- ACTUALIZAR TABLA HISTORIAL CONTRASEÑA
	UPDATE TBL_MS_HIST_CONTRASEGNA 
	SET CONTRASEGNA = PV_CONTRASEGNA
	WHERE COD_HIST_CONTRA = PB_COD;

-- ACTUALIZAR TABLA BITACORA USR
 	UPDATE TBL_MS_BITACORA_USR  
	SET CONTRA_MODF_POR = CURRENT_USER(),
		CONTRA_FEC_MODF = CURRENT_TIMESTAMP()
	WHERE COD_BITACORA_USR = PB_COD;
COMMIT;
END






