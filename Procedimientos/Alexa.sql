
/* 
    PB  = PARAMETRO BIGINT
 -- PV  = PARAMETRO VARCHAR
 -- PC  = PARAMETRO CHAR
 -- PEM = PARAMETRO ENUM
 -- PF  = PARAMETRO FECHA
 -- PMI = PARAMETRO MEDIUMINT 
 -- PMT = PARAMETRO MEDIUMTEXT
 -- PI  = PARAMETRO INT
 -- PD  = PARAMETRO DECIMAL
 -- PDB = PARAMETRO DOUBLE
 -- PMB = PARAMETRO MEDIUMBLOB
*/

CREATE PROCEDURE PROC_CUENTAS( 
  IN PB_COD_CLASIFICACION BIGINT
  ,IN PV_NUM_CUENTA VARCHAR(255)
  ,IN PV_NOMBRE_CUENTA VARCHAR(255)
  ,IN PV_NATURALEZA VARCHAR(255)
  ,IN PV_OPERACION VARCHAR(1)
  ,IN PB_FILA BIGINT

  
  )BEGIN
  START TRANSACTION;
  IF PV_OPERACION = 1 THEN
  INSERT INTO tbl_cuentas
(COD_CLASIFICACION, NUM_CUENTA, NOM_CUENTA) 
VALUES (PB_COD_CLASIFICACION,PV_NUM_CUENTA,PV_NOMBRE_CUENTA );

  
  
  ELSEIF  PV_OPERACION = 2 THEN 
  UPDATE tbl_cuentas 
SET COD_CLASIFICACION = PB_COD_CLASIFICACION , NUM_CUENTA = PV_NUM_CUENTA, NOM_CUENTA = PV_NOMBRE_CUENTA 
WHERE  COD_CUENTA=PB_FILA;


ELSEIF PV_OPERACION = 3 THEN

DELETE FROM tbl_cuentas
WHERE COD_CUENTA = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM tbl_cuentas;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM tbl_cuentas WHERE COD_CUENTA = PB_FILA;

  COMMIT;
  END IF;
  END;



CREATE PROCEDURE PROC_SUBCUENTAS( 
  IN PB_COD_CLASIFICACION BIGINT
  ,IN PV_NUM_SUBCUENTA VARCHAR(255)
  ,IN PV_NOMBRE_SUBCUENTA VARCHAR(255)
  ,IN PB_COD_CUENTA BIGINT
  ,IN PV_OPERACION VARCHAR(1)
  ,IN PB_FILA BIGINT

)BEGIN
  START TRANSACTION;
  IF PV_OPERACION = 1 THEN
  INSERT INTO tbl_subcuentas
(COD_CLASIFICACION, NUM_SUBCUENTA, NOM_SUBCUENTA,COD_CUENTA) 
VALUES (PB_COD_CLASIFICACION,PV_NUM_SUBCUENTA,PV_NOMBRE_SUBCUENTA,PB_COD_CUENTA);

ELSEIF  PV_OPERACION = 2 THEN 
  UPDATE tbl_subcuentas 
SET COD_CLASIFICACION = PB_COD_CLASIFICACION , NUM_SUBCUENTA = PV_NUM_SUBCUENTA, NOM_SUBCUENTA = PV_NOMBRE_SUBCUENTA,COD_CUENTA= PB_COD_CUENTA 
WHERE  COD_SUBCUENTA=PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM tbl_subcuentas
WHERE COD_SUBCUENTA = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM tbl_subcuentas;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM tbl_subcuentas WHERE COD_SUBCUENTA = PB_FILA;

  COMMIT;
  END IF;
  END;


CREATE PROCEDURE PROC_ESTADOS_SUBCUENTAS( 
  IN PB_COD_SUBCUENTA BIGINT
  ,IN PEM_EST_CUENTA ENUM ('INGRESADA', 'PENDIENTE', 'PROCESADA')
  ,IN PV_OPERACION VARCHAR(1)
  ,IN PB_FILA BIGINT

)BEGIN
  START TRANSACTION;
  IF PV_OPERACION = 1 THEN
  INSERT INTO tbl_estados_subcuentas
(COD_SUBCUENTA, EST_CUENTA ) 
VALUES (PB_COD_SUBCUENTA, PEM_EST_CUENTA);

ELSEIF  PV_OPERACION = 2 THEN 
  UPDATE tbl_estados_subcuentas 
SET COD_SUBCUENTA = PB_COD_SUBCUENTA , EST_CUENTA = PEM_EST_CUENTA
WHERE  COD_ESTADO=PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM tbl_estados_subcuentas
WHERE COD_ESTADO = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM tbl_estados_subcuentas;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM tbl_estados_subcuentas WHERE COD_ESTADO = PB_FILA;

  COMMIT;
  END IF;
  END;































-- todos los procedimientos necesitan adaptarse a la nueva estructura de las base de datos

CREATE PROCEDURE PRC_CUENTAS(
   IN PV_NATURALEZA VARCHAR(255)
  ,IN PV_NOMBRE_CUENTA VARCHAR(255)
  ,IN PV_NUM_CUENTA VARCHAR(255)
  ,IN PV_OPERACION VARCHAR(1)
  ,IN PB_FILA BIGINT 

)
BEGIN
DECLARE V_CODIGO VARCHAR(255);
DECLARE V_VALIDADORDEEXISTENCIA INT;
IF PV_OPERACION = 1 THEN 
/*LLEVA FORANEA CON LA CLASIFICACION*/
/*Valida naturaleza*/
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA = PV_NATURALEZA INTO V_CODIGO;
/*Valida existencia*/
select count(*) from tbl_cuentas where NUM_CUENTA =  CONCAT(V_CODIGO,'.',PV_NUM_CUENTA) INTO V_VALIDADORDEEXISTENCIA;
/*si NO existe*/
IF V_VALIDADORDEEXISTENCIA = 0 THEN

INSERT INTO tbl_cuentas
(COD_CLASIFICACION, NUM_CUENTA, NOM_CUENTA) 
VALUES (V_CODIGO, CONCAT(V_CODIGO,'.',PV_NUM_CUENTA), PV_NOMBRE_CUENTA);
/* Si existe despliega mensaje que esta duplicado */
ELSE
SELECT 'NUMERO DE CUENTA DUPLICADA';
END IF;
IF PV_OPERACION = 2 THEN


COMMIT;
END;



CREATE PROCEDURE PRC_SUBCUENTAS(
     IN PV_CLASIFICACION BIGINT
    ,IN PB_COD_CUENTA   BIGINT
    ,IN PV_NUM_SUBCUENTA  VARCHAR(255) /*Numero correlativo para el catagalo de cuentas*/
    ,IN PV_NOM_SUBCUENTA VARCHAR(255)
    ,IN PV_OPERACION VARCHAR(1)
    ,IN PV_FILA BIGINT
    )
BEGIN
DECLARE V_CODIGO VARCHAR(255);
DECLARE VALIDADORDEEXISTENCIA INT;
DECLARE V_NATURALEZA VARCHAR(255);
/* DECLARE V_FORANEA BIGINT; la llave foranea de cuentas*/
DECLARE V_CLASIFICACION BIGINT; /*La clasificacion de la cuentas*/
/* SE LE HACE UN SELECT A TODOS LAS CUENTAS POR LA NATURALEZA QUE SE ESPECIFIQUE PARA PRESENTARLE UNA LISTA AL USUARIO
Y QUE PUEDA ESCOGER COMO SUB CUENTA DE QUE CUENTA QUIERE CREAR UNA NUEVA SUBCUENTA */
IF PV_OPERACION = 1 THEN
SELECT NOM_CUENTA FROM tbl_cuentas WHERE cod_clasificacion =  PV_CLASIFICACION;

ELSEIF PV_OPERACION = 2 THEN 
SELECT COD_CLASIFICACION,NUM_CUENTA FROM tbl_cuentas  WHERE COD_CUENTA = PB_COD_CUENTA INTO V_CLASIFICACION,V_CODIGO;
select count(*) from tbl_subcuentas where NUM_SUBCUENTA =  CONCAT(V_CODIGO,'.',PV_NUM_SUBCUENTA) INTO VALIDADORDEEXISTENCIA;

  IF VALIDADORDEEXISTENCIA = 0 THEN
  INSERT INTO tbl_subcuentas
(COD_CLASIFICACION, NUM_SUBCUENTA, NOM_SUBCUENTA, COD_CUENTA) 
VALUES (V_CLASIFICACION,CONCAT(V_CODIGO,'.',PV_NUM_SUBCUENTA), PV_NOM_SUBCUENTA, PB_COD_CUENTA);

  else
  select "subcuenta duplicada";
  END IF;
END IF; 
COMMIT;
END;




