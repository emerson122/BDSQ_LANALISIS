DROP PROCEDURE IF EXISTS INS_BAL_GENERAL;
CREATE PROCEDURE `INS_BAL_GENERAL`(
 IN PV_NOMBRE_EMPRESA VARCHAR(255)
,IN PB_CODPERIODO     BIGINT 
,IN PV_NATURALEZA     VARCHAR(255)
,IN PV_OPCION         VARCHAR(1)
)
BEGIN
DECLARE V_NUMCUENTA,V_NOMCUENTA VARCHAR(255);
DECLARE V_TOTAL,V_ACTIVO,V_PASIVO,V_PATRIMONIO DECIMAL(8,2);
DECLARE V_NUM,V_CLASIFICACION,I,V_CODIGO BIGINT;
IF PV_OPCION = 1 THEN
/*Trea saldo debe y haber de activo*/
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  PV_NATURALEZA INTO V_CLASIFICACION;
SELECT COD_LIBMAYOR,NUM_CUENTA,NOM_CUENTA,SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO INTO V_CODIGO,V_NUMCUENTA,V_NOMCUENTA,V_TOTAL;

/* INSERTAR EN LA TABLA DE ACTIVOS DEL BALANCE */
INSERT INTO tbl_bal_totactivos
(COD_PERIODO, TOT_ACTIVO) 
VALUES (PB_CODPERIODO, V_TOTAL);
/* MOSTRAR LOS DATOS PARA EL USUARIO */
SELECT COD_LIBMAYOR,NUM_CUENTA,NOM_CUENTA,SAL_DEBE FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO;
ELSEIF PV_OPCION = 2 THEN
/*Trea saldo debe y haber de activo*/
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  PV_NATURALEZA INTO V_CLASIFICACION;
SELECT COD_LIBMAYOR,NUM_CUENTA,NOM_CUENTA,SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO INTO V_CODIGO,V_NUMCUENTA,V_NOMCUENTA,V_TOTAL;

/* INSERTAR EN LA TABLA DE ACTIVOS DEL BALANCE */
INSERT INTO tbl_bal_totpasivos
(COD_PERIODO, TOT_PASIVO) 
VALUES (PB_CODPERIODO, V_TOTAL);

/* MOSTRAR LOS DATOS PARA EL USUARIO */
SELECT COD_LIBMAYOR,NUM_CUENTA,NOM_CUENTA,SAL_HABER FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO;

ELSEIF PV_OPCION = 3 THEN
/*Trea saldo debe y haber de activo*/
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  PV_NATURALEZA INTO V_CLASIFICACION;
SELECT COD_LIBMAYOR,NUM_CUENTA,NOM_CUENTA,SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO INTO V_CODIGO,V_NUMCUENTA,V_NOMCUENTA,V_TOTAL;

/* INSERTAR EN LA TABLA DE ACTIVOS DEL BALANCE */

INSERT INTO tbl_bal_totpatrimonios
(COD_PERIODO, TOT_PATRIMONIO) 
VALUES (PB_CODPERIODO, V_TOTAL);

/* MOSTRAR LOS DATOS PARA EL USUARIO */
SELECT COD_LIBMAYOR,NUM_CUENTA,NOM_CUENTA,SAL_HABER FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO;

ELSEIF PV_OPCION = 4 THEN

SELECT 
COD_CLASIFICACION,NUM_CUENTA,NOM_CUENTA,SAL_DEBE,SAL_HABER 
FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO;

ELSEIF PV_OPCION = 5 THEN

SELECT  TOT_ACTIVO FROM  TBL_BAL_TOTACTIVOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_ACTIVO;
SELECT  TOT_PASIVO FROM  TBL_BAL_TOTPASIVOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_PASIVO;
SELECT  TOT_PATRIMONIO FROM  TBL_BAL_TOTPATRIMONIOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_PATRIMONIO;

SELECT V_ACTIVO AS TOTAL_ACTIVOS,
V_PASIVO AS TOTAL_PASIVOS,
V_PATRIMONIO AS TOTAL_PATRIMONIO;
END IF;
COMMIT;
END;




DROP PROCEDURE IF EXISTS PRC_SALDOS_BALANCES;
CREATE PROCEDURE PRC_SALDOS_BALANCES(
        IN PI_TOT_ACTIVO   DECIMAL(8,2) 
      , IN PI_TOT_PASPAT   DECIMAL(8,2) 
      , IN PB_CODPERIODO   BIGINT
      , IN PV_OPERACION VARCHAR(1)
      , IN PB_FILA   BIGINT 
)
BEGIN
DECLARE V_ACTIVO,V_PASIVO,V_PATRIMONIO,V_TOTAL BIGINT;
START TRANSACTION;
IF PV_OPERACION = 1 THEN

 SELECT SUM(TOT_ACTIVO) FROM TBL_BAL_TOTACTIVOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_ACTIVO;
 SELECT SUM(TOT_PASIVO) FROM TBL_BAL_TOTPASIVOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_PASIVO;
 SELECT SUM(TOT_PATRIMONIO) FROM TBL_BAL_TOTPATRIMONIOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_PATRIMONIO;

SET V_TOTAL := V_PASIVO + V_PATRIMONIO;

INSERT INTO tbl_saldos_balances
( FEC_SALDOS, TOT_ACTIVO, TOT_PASPAT) 
VALUES ( NOW(), V_ACTIVO, V_TOTAL);


ELSEIF PV_OPERACION = 2 THEN

UPDATE tbl_saldos_balances 
SET COD_BALANCE = PB_COD_BALANCE , FEC_SALDOS = NOW(), TOT_ACTIVO = PI_TOT_ACTIVO, TOT_PASPAT = PI_TOT_PASPAT 
WHERE COD_SALDO = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM tbl_saldos_balances 
WHERE COD_SALDO = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_SALDOS_BALANCES;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_SALDOS_BALANCES WHERE COD_SALDO = PB_FILA;

END IF;
COMMIT;
END;

DROP PROCEDURE IF EXISTS PRC_LIBROS_MAYORES;
CREATE PROCEDURE PRC_LIBROS_MAYORES(
  IN PB_COD_PERIODO BIGINT                                                                        
, IN PV_NOM_CUENTA   VARCHAR(255) 
, IN PD_SALDEBE      DECIMAL(8,2)
, IN PD_SALHABER     DECIMAL(8,2)
, IN PV_OPERACION VARCHAR (1)
, IN PB_FILA BIGINT 
)

BEGIN
DECLARE V_TOTDEBE, V_TOTHABER,V_CODCUENTA,V_CLASIFICACION INT;
DECLARE V_NOMBRE,V_NUMSUB,V_ESTADOCUENTA VARCHAR(255);
START TRANSACTION;
/*INSERTAR CUENTAS QUE EXISTEN EN LIBRO DIARIO*/
IF PV_OPERACION = 1 THEN

SELECT COD_CLASIFICACION, COD_CUENTA,NUM_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_CODCUENTA,V_NUMSUB;
SELECT SUM(SAL_DEBE),SUM(SAL_HABER)  FROM TBL_LIBROS_DIARIOS where COD_CUENTA = V_CODCUENTA AND COD_PERIODO = PB_COD_PERIODO INTO  V_TOTDEBE, V_TOTHABER ;
SELECT COD_ESTCUENTA FROM TBL_ESTADOS_CUENTAS WHERE COD_CUENTA = V_CODCUENTA INTO V_ESTADOCUENTA;
INSERT INTO tbl_libros_mayores
(COD_CUENTA, COD_CLASIFICACION, COD_PERIODO, COD_ESTCUENTA, NUM_CUENTA, NOM_CUENTA, SAL_DEBE, SAL_HABER, FEC_LIBMAYOR) 
VALUES (V_CODCUENTA, V_CLASIFICACION, PB_COD_PERIODO, V_ESTADOCUENTA, V_NUMSUB, PV_NOM_CUENTA, V_TOTDEBE, V_TOTHABER, NOW());

UPDATE tbl_estados_cuentas 
SET  EST_CUENTA = 'PROCESADA'
WHERE COD_CUENTA = V_CODCUENTA;

ELSEIF PV_OPERACION = 2 THEN
SELECT COD_CLASIFICACION, COD_CUENTA,NUM_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_CODCUENTA,V_NUMSUB;
SELECT COD_ESTCUENTA FROM TBL_ESTADOS_CUENTAS WHERE COD_CUENTA = V_CODCUENTA INTO V_ESTADOCUENTA;

UPDATE TBL_LIBROS_MAYORES
SET COD_CUENTA = V_CODCUENTA , COD_PERIODO = PB_COD_PERIODO,COD_ESTCUENTA =V_ESTADOCUENTA, NUM_CUENTA = V_NUMSUB,NOM_CUENTA = PV_NOM_CUENTA, SAL_DEBE = PD_SALDEBE, SAL_HABER = PD_SALHABER, FEC_LIBMAYOR=NOW()
WHERE COD_LIBMAYOR = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM TBL_LIBROS_MAYORES 
WHERE COD_LIBMAYOR = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_LIBROS_MAYORES;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_LIBROS_MAYORES WHERE COD_LIBMAYOR = PB_FILA;

/*INSERTAR CUENTAS QUE NO EXISTEN EN LIBRO DIARIO */
ELSEIF PV_OPERACION = 6 THEN 
SELECT COD_CLASIFICACION, COD_CUENTA,NUM_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_CODCUENTA,V_NUMSUB;
SELECT COD_ESTCUENTA FROM TBL_ESTADOS_CUENTAS WHERE COD_CUENTA = V_CODCUENTA INTO V_ESTADOCUENTA;
INSERT INTO tbl_libros_mayores
(COD_CUENTA, COD_CLASIFICACION, COD_PERIODO, COD_ESTCUENTA, NUM_CUENTA, NOM_CUENTA, SAL_DEBE, SAL_HABER, FEC_LIBMAYOR) 
VALUES (V_CODCUENTA, V_CLASIFICACION, PB_COD_PERIODO, V_ESTADOCUENTA, V_NUMSUB, PV_NOM_CUENTA , PD_SALDEBE, PD_SALHABER, NOW());
END IF;
COMMIT;
END;


DROP PROCEDURE IF EXISTS SEL_LIBROS_MAYORES;
CREATE PROCEDURE SEL_LIBROS_MAYORES(
   IN PB_CODPERIODO BIGINT
  ,IN PV_OPERACION  VARCHAR(1)
)BEGIN 
DECLARE V_PERIODO BIGINT;
START TRANSACTION;
IF PV_OPERACION = 1 THEN
SELECT SUM(SAL_DEBE),SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO;
END IF;
COMMIT;
END;


DROP PROCEDURE IF EXISTS PROC_ESTADOS_RESULTADOS;
CREATE PROCEDURE PROC_ESTADOS_RESULTADOS(
     IN PV_NATURALEZA VARCHAR(255)
    ,IN PB_PERIODO BIGINT
    ,IN PB_PARAMETRO BIGINT
    ,IN PB_COD_LIBMAYOR BIGINT
    ,IN PV_NOMBRE_EMPRESA VARCHAR(255)
    ,IN PV_VEN_NETAS VARCHAR(255)
    ,IN PV_COS_VENTAS VARCHAR(255)
    ,IN PV_UTI_BRUTA VARCHAR(255)
    ,IN PV_TOT_GASTOS VARCHAR(255)
    ,IN PV_UTI_ANTIMP VARCHAR(255)
    ,IN PV_IMP_UTILIDAD VARCHAR(255)
    ,IN PV_UTI_NETA VARCHAR(255)
    ,IN PV_OPCION VARCHAR(1)
    ,IN PB_FILA BIGINT
)BEGIN
 START TRANSACTION;
  
  IF PV_OPCION = 1 THEN

  INSERT INTO tbl_estados_resultados
  (COD_LIBMAYOR, COD_PERIODO, COD_PARAMETRO, EMPRESA, FEC_ESTADO, VEN_NETAS, COS_VENTAS, UTI_BRUTA, TOT_GASTOS, UTI_ANTIMP, IMP_UTILIDAD, UTI_NETA) 
  VALUES (PB_COD_LIBMAYOR, PB_PERIODO, PB_PARAMETRO, PV_NOMBRE_EMPRESA, NOW(), PV_VEN_NETAS, PV_COS_VENTAS, PV_UTI_BRUTA, PV_TOT_GASTOS, PV_UTI_ANTIMP, PV_IMP_UTILIDAD,PV_UTI_NETA );
  ELSEIF PV_OPCION = 2 THEN
  UPDATE tbl_estados_resultados 
SET COD_LIBMAYOR = PB_COD_LIBMAYOR , COD_PERIODO = PB_PERIODO, COD_PARAMETRO = PB_PARAMETRO, EMPRESA = PV_NOMBRE_EMPRESA, FEC_ESTADO = NOW(), VEN_NETAS = PV_VEN_NETAS, COS_VENTAS = PV_COS_VENTAS, UTI_BRUTA = PV_UTI_BRUTA, TOT_GASTOS = PV_TOT_GASTOS, UTI_ANTIMP = PV_UTI_ANTIMP, IMP_UTILIDAD = PV_IMP_UTILIDAD, UTI_NETA = PV_UTI_NETA 
WHERE COD_ESTRESULTADO = PB_FILA;

  ELSEIF PV_OPCION = 3 THEN
  DELETE FROM stbl_estados_resultados 
WHERE COD_ESTRESULTADO  = PB_FILA;
  ELSEIF PV_OPCION = 4 THEN
  SELECT * FROM TBL_ESTADOS_RESULTADOS ;  
    ELSEIF PV_OPCION = 5 THEN
     SELECT * FROM TBL_ESTADOS_RESULTADOS WHERE COD_ESTRESULTADO  = PB_FILA; 
  END IF;
COMMIT;
END;




DROP PROCEDURE IF EXISTS PRC_ESTADOS_RESULTADOS;
CREATE PROCEDURE PRC_ESTADOS_RESULTADOS(
     IN PB_CODPERIODO BIGINT
    ,OUT VENTAS_NETAS DECIMAL(8,2)
    ,OUT COS_VENTAS DECIMAL(8, 2)  
    ,OUT UTI_BRUTA DECIMAL(8, 2) 
    ,OUT TOT_GASTOS DECIMAL(8, 2) 
    ,OUT UTI_ANTIMP DECIMAL(8, 2) 
    ,OUT IMP_UTILIDAD DECIMAL(8, 2) 
    ,OUT UTI_NETA DECIMAL(8, 2)  
)BEGIN
DECLARE V_DESCUENTOi,V_DESCUENTOg,V_VENTAS,V_SUELDOS,V_GASTOSV,V_GASTOS   TINYINT ;
DECLARE V_TOTING, V_TOTDES,V_TOTVENTAS,V_IMP,V_TOTGASTOS,V_TOTSUELDOS,V_TOTGASTOSV DECIMAL(8,2) DEFAULT 0;
SET V_DESCUENTOi  := 0;
SET V_DESCUENTOg := 0;
 START TRANSACTION;
 /* OBTENER COD DE CLASIFICACION DE LOS DESCUENTOS */
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'DESCUENTO_I' INTO V_DESCUENTOi;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'DESCUENTO_G' INTO V_DESCUENTOg;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'VENTAS' INTO V_VENTAS;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'GASTOS' INTO V_GASTOS;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'GASTOSV' INTO V_GASTOSV;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'SUELDOS' INTO V_SUELDOS;
  
  /* OBTENER SALDOS  DESCUENTOS  DE INGRESO*/
  SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_DESCUENTOi INTO V_TOTING;

   /* OBTENER TOTAL DE SALDOS DE VENTAS */
  SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_VENTAS INTO V_TOTVENTAS;
 -- TOTAL SUELDOS
   SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_SUELDOS INTO V_TOTSUELDOS;
   
   -- TOTAL DE GASTOS VENTAS
     SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_GASTOSV INTO V_TOTGASTOSV;

  /* OBTENER SALDOS DE LOS DESCUENTOS  DE GASTOS*/
  SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_DESCUENTOg INTO V_TOTDES;
  /* OBTENER TOTAL DE SALDOS DE GASTOS TOTALES*/
  SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_GASTOS INTO V_TOTGASTOS;
  /* RECUPERAR EL IMPUESTO */
  SELECT CAST(VALOR AS DECIMAL(8,2)) FROM tbl_ms_parametros WHERE PARAMETRO = 'IMP_UTILIDAD' INTO V_IMP;
    
    SET VENTAS_NETAS = V_TOTVENTAS - V_TOTING;
    SET COS_VENTAS = V_TOTSUELDOS + V_TOTGASTOSV;
    SET UTI_BRUTA = VENTAS_NETAS - COS_VENTAS;
    SET TOT_GASTOS = V_TOTGASTOS;
    SET UTI_ANTIMP = UTI_BRUTA - TOT_GASTOS;
    SET IMP_UTILIDAD = UTI_ANTIMP * V_IMP;
    SET UTI_NETA = UTI_ANTIMP - IMP_UTILIDAD;
COMMIT;
END;